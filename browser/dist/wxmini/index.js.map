{"version":3,"sources":["webpack:///webpack/bootstrap 3de379614d67f2ea08b6","webpack:///./common/string.js","webpack:///./third-party/bignumber.js","webpack:///./common/date.js","webpack:///./common/exception.js","webpack:///./common/promise-finally-polyfill.js","webpack:///./common/utils.bigint.js","webpack:///./libs/crypt.js","webpack:///./libs/crypt.md5.js","webpack:///./libs/crypt.sha1.js","webpack:///./libs/date.js","webpack:///./libs/string.js","webpack:///(webpack)/buildin/global.js","webpack:///./wxmini/libs/fetch.js","webpack:///./wxmini/libs/utils.js","webpack:///./common/crypt.js","webpack:///./common/utils.js","webpack:///./wxmini/index.js"],"names":[],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA,2CAA2C,cAAc;;QAEzD;QACA;QACA;QACA;QACA;QACA;QACA;QACA,KAAK;QACL;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;;;;;;;;AChEa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,6FAA6F,EAAE;AAC/F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,GAAG;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG,oBAAoB;;AAEvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,yCAAyC;AACzC,yCAAyC;AACzC,2CAA2C;AAC3C,2CAA2C;AAC3C;AACA;AACA,E;;;;;;;AC3SA,kCAAa;;AAEb,qGAAqG,mBAAmB,EAAE,mBAAmB,8HAA8H;;AAE3Q;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,cAAc;;;AAGd;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA,cAAc,wBAAwB;AACtC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+DAA+D,EAAE;AACjE;AACA;AACA;;AAEA,sDAAsD,EAAE;AACxD,oDAAoD,EAAE;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,8FAA8F,EAAE;AAChG;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA,uBAAuB,0BAA0B;;AAEjD;AACA,kCAAkC,8BAA8B;AAChE;;AAEA;AACA;;AAEA;AACA,sFAAsF,EAAE;AACxF;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6CAA6C,SAAS;AACtD;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA,0BAA0B,KAAK;AAC/B;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO;AACrC,8BAA8B,OAAO;AACrC,8BAA8B,gBAAgB;AAC9C;AACA,8BAA8B,gBAAgB;AAC9C;AACA,8BAA8B,eAAe;AAC7C,8BAA8B,eAAe;AAC7C,8BAA8B,OAAO;AACrC,8BAA8B,OAAO;AACrC,8BAA8B,OAAO;AACrC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA,+BAA+B,OAAO;AACtC,yDAAyD,EAAE;AAC3D,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;;AAEA,8BAA8B,OAAO;AACrC,wDAAwD,EAAE;AAC1D,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;;AAEA,+BAA+B;AAC/B;AACA,yDAAyD,EAAE;AAC3D,uDAAuD,EAAE;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,sBAAsB,gBAAgB;AACtC;AACA,gDAAgD,EAAE;AAClD,gDAAgD,EAAE;AAClD,8CAA8C,EAAE;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2EAA2E;AAC3E;AACA;AACA;;AAEA,uBAAuB,eAAe;AACtC,gEAAgE,EAAE;AAClE;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,uBAAuB,eAAe;AACtC,gEAAgE,EAAE;AAClE,8CAA8C,OAAO;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,4BAA4B,OAAO;AACnC,sDAAsD,EAAE;AACxD,oDAAoD,EAAE;AACtD;AACA;AACA;AACA;;AAEA,8BAA8B,OAAO;AACrC,wDAAwD,EAAE;AAC1D,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;;AAEA,uBAAuB;AACvB,gDAAgD,EAAE;AAClD;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA,qDAAqD,GAAG;AACxD,mDAAmD,GAAG;AACtD,0CAA0C,OAAO;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,8BAA8B,OAAO;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;;AAErB;AACA;;AAEA,8BAA8B,OAAO;;AAErC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;;AAEA,0BAA0B,OAAO;AACjC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,YAAY;;AAElC;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,gCAAgC,YAAY;;AAE5C;AACA,yCAAyC,SAAS;;AAElD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB,cAAc;AAChC;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA,mCAAmC,qBAAqB;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,UAAU;;AAE7C;AACA,qCAAqC,QAAQ;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC,KAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;;AAEjB,qCAAqC,QAAQ;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,uBAAuB;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,uBAAuB;AAClD;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,qBAAqB;;AAErB;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,0CAA0C,SAAS;AACnD;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;;AAEA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,qDAAqD,KAAK;AAC1D,qBAAqB;AACrB;AACA;AACA;AACA,kCAAkC,KAAK;AACvC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,mBAAmB;AACrC;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,SAAS;;AAE3B;AACA,0BAA0B,SAAS;;AAEnC;AACA;;AAEA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,uDAAuD,EAAE;AACzD,oDAAoD,EAAE,UAAU,EAAE;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,SAAS;AACnD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;;AAEA;AACA,sCAAsC,iBAAiB;AACvD;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA,uCAAuC,SAAS;;AAEhD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+BAA+B;;AAE/B;AACA;;AAEA;AACA,sDAAsD,SAAS;AAC/D;AACA,2CAA2C,SAAS;;AAEpD;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,eAAe;AACtD;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gCAAgC,aAAaiBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA,2BAA2B,KAAK;AAChC;AACA,aAAa;;AAEb;AACA;;AAEA,+BAA+B,OAAO;;AAEtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,6BAA6B,KAAK;AAClC;;AAEA;AACA,kBAAkB,OAAO;;AAEzB;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAkB,YAAY;;AAE9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,sBAAsB,KAAK;AAC3B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,GAAG;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA,qEAAqE,EAAE;AACvE;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,sBAAsB,aAAa;;AAEnC;AACA,8BAA8B,SAAS;AACvC;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,kDAAkD,GAAG;AACrD,oDAAoD,GAAG;AACvD,mDAAmD,GAAG;AACtD,iDAAiD,GAAG;AACpD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,8CAA8C,EAAE;AAChD,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;;AAEzB,8DAA8D,IAAI,OAAO,IAAI;AAC7E;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wCAAwC,KAAK;;AAE7C;AACA;;AAEA,yBAAyB,UAAU;AACnC;AACA;AACA;;AAEA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,gDAAgD,GAAG;AACnD,kDAAkD,GAAG;AACrD,sDAAsD,GAAG;AACzD,oDAAoD,GAAG;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,4DAA4D,GAAG;AAC/D,0DAA0D,GAAG;AAC7D,2DAA2D,GAAG;AAC9D,yDAAyD,GAAG;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,sDAAsD,GAAG;AACzD,oDAAoD,GAAG;AACvD,qDAAqD,GAAG;AACxD,mDAAmD,GAAG;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,uDAAuD,GAAG;AAC1D,qDAAqD,GAAG;AACxD,sDAAsD,GAAG;AACzD,oDAAoD,GAAG;AACvD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,0BAA0B,SAAS;AACnC;AACA;;AAEA;AACA;AACA;;AAEA,kJAAkJ,WAAW;AAC7J;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA,0DAA0D,GAAG;AAC7D,wDAAwD,GAAG;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB,wBAAwB;AACxC;AACA,4CAA4C,EAAE;AAC9C,0CAA0C,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,qDAAqD,GAAG;AACxD,mDAAmD,GAAG;AACtD,yDAAyD,GAAG;AAC5D,uDAAuD,GAAG;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA,6CAA6C,EAAE;AAC/C,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,OAAO;AACrB;AACA;AACA,kBAAkB,KAAK;AACvB;AACA;;AAEA;AACA,0BAA0B,0BAA0B;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,mBAAmB,OAAO;AAC1B;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,SAAS;AACvB,mCAAmC,QAAQ;AAC3C;;AAEA,kBAAkB,gBAAgB;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,0BAA0B,KAAK;AAC/B;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA,QAAQ,IAAyC;AACjD,QAAQ,kCAAO;AACf;AACA,SAAS;AAAA,oGAAC;;AAEV;AACA,KAAK;AACL;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC,a;;;;;;;AC1rFY;;AAEb;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjiCAAiC;AACjC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,E;;;;;;;AC3Ra;;AAEb;AACA;AACA;AACA;AACA;;AAEA,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H;;AAE1Q;AACA;AACA,mBAAmB,kBAAkB;AACrC,gCAAgC,uDAAuD,+BAA+B,sDAAsD;AAC5K;AACA,GAAG;AACH,wEAAwE,4DAA4D;AACpI;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG,wEAAwE,eAAe,yEAAyE,EAAE,EAAE;AACvK;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC,Q;;;;;;;AChGY;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA,CAAC,I;;;;;;;ACjBY;;AAEb;AACA;AACA;AACA;AACA;;AAEA,qGAAqG,mBAAmB,EAAE,mBAAmB,8HAA8H;;AAE3Q;AACA;AACA,CAAC;AACD;AACA;;AAEA,gBAAgB,mBAAO,CAAC,CAA6B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,cAAc;AACjC;AACA;;AAEA;AACA,iDAAiD;AACjD;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;;AAEA;AACA,sDAAsD;AACtD;;AAEA;AACA,sDAAsD;AACtD;;AAEA;AACA,sDAAsD;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;;AAEA;AACA,sDAAsD;AACtD;;AAEA;AACA,sDAAsD;AACtD;;AAEA;AACA,sDAAsD;AACtD;;AAEA;AACA,sDAAsD;AACtD;;AAEA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oDAAoD;AACzE,E;;;;;;;AClIa;;AAEb;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;;AAEA,YAAY,mBAAO,CAAC,EAAiB;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,UAAU;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA,gBAAgB;AAChB,mDAAmD;AACnD;;AAEA;AACA;AACA,E;;;;;;;ACtKa;;AAEb;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,mBAAO,CAAC,CAAkB;;AAE5C;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,OAAO;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,E;;;;;;;ACzLa;;AAEb;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,mBAAO,CAAC,CAAkB;;AAE5C;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,OAAO;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;;AAEA,eAAe,QAAQ;AACvB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,E;;;;;;;AC/Ha;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,mBAAO,CAAC,CAAgB;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;ACtBa;;AAEb;AACA;AACA;AACA;AACA;;AAEA,aAAa,mBAAO,CAAC,CAAkB;;AAEvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,+BAA+B;AAC/B;AACA;AACA,uC;;;;;;AChEA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;ACpBA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+BAA+B;AACnD;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEO;AACP;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH,C;;;;;;;AClEa;;AAEb;AACA;AACA;AACA;AACA;;AAEA,YAAY,mBAAO,CAAC,EAAoB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/Ka;;AAEb;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,mBAAO,CAAC,CAAU;;AAEpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;ACzDa;;AAEb;AACA;AACA;AACA;AACA;;AAEA,qGAAqG,mBAAmB,EAAE,mBAAmB,8HAA8H;;AAE3Q;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA,gBAAgB,mBAAO,CAAC,CAAQ;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,E;;;;;;;;;;;;;;;;;;AC5FA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAO,CAAC,CAAoC;AAC5C;AACA;AACA;;AAEA,iBAAiB,mBAAO,CAAC,EAAc;AACvC,iBAAiB,mBAAO,CAAC,CAAe;AACxC,gBAAgB,mBAAO,CAAC,CAAmB;AAC3C,iBAAiB,mBAAO,CAAC,CAAoB;AAC7C,gBAAgB,mBAAO,CAAC,CAAwB;AAChD,aAAa,mBAAO,CAAC,EAAc;AACnC,gBAAgB,mBAAO,CAAC,CAA6B;AACrD,YAAY,mBAAO,CAAC,CAAc;AAClC,aAAa,mBAAO,CAAC,EAAgB;AACrC,iBAAiB,mBAAO,CAAC,CAAqB;;AAE9C;AACA;AACA;AACA;AACA;AACA;;AAWC","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3de379614d67f2ea08b6","'use strict';\n\n/**\n * Copyright (c) 2017 Copyright brainpoint All Rights Reserved.\n * Author: lipengxiang\n * Desc:\n */\n\n/**\n * @desc: 判断是否是手机号码.\n * @return: boolean.\n */\n\nexports.isPhoneMobile = function (str) {\n  if (!str) return false;\n  if (/^(1[2-9][0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[89]|98[0-9]|99[0-9])\\d{8}$/.test(str)) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * @desc: 判断是否是email.\n * @return: boolean.\n */\nexports.isEmail = function (str) {\n  if (!str) return false;\n  if (/^(([A-Za-z0-9\\u4e00-\\u9fa5_-]|\\.)+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+)$/.test(str)) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * @desc: 判断是否是英文数字组合.\n * @return: boolean.\n */\nexports.isAlphaOrDigit = function (str) {\n  if (!str) return false;\n  if (/^[A-Za-z0-9]+$/.test(str)) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * @desc: 判断是否是中文.\n * @return: boolean.\n */\nexports.isChinese = function (str) {\n  if (!str) return false;\n  if (/^[\\u4e00-\\u9fa5]{0,}$/.test(str)) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * @desc: 是否为空串.\n * @return: boolean.\n */\nexports.isEmpty = function (s) {\n\n  if (!s) {\n    return true;\n  }\n\n  if (typeof s !== 'string') {\n    return true;\n  }\n\n  if (s.length == 0) return true;\n\n  return false;\n};\n\n/**\n * @desc: 获得字符串utf8编码后的字节长度.\n * @return: u32.\n */\nexports.getByteSize = function (s) {\n  if (!s) return 0;\n\n  var totalLength = 0;\n  var i;\n  var charCode;\n  for (i = 0; i < s.length; i++) {\n    charCode = s.charCodeAt(i);\n    if (charCode < 0x007f) {\n      totalLength = totalLength + 1;\n    } else if (0x0080 <= charCode && charCode <= 0x07ff) {\n      totalLength += 2;\n    } else if (0x0800 <= charCode && charCode <= 0xffff) {\n      totalLength += 3;\n    } else if (0x10000 <= charCode) {\n      totalLength += 4;\n    }\n  }\n  //alert(totalLength);\n  return totalLength;\n};\n\n/**\n * @desc: 替换字符串中所有的strSrc->strDest.\n * @return: string.\n */\nexports.replace = function (str, strSrc, strDest) {\n  if (!str || !strSrc) return str;\n\n  if (str.length == 0) return str;\n\n  var s = '';\n\n  var endPos = str.length;\n  var i = 0;\n  var j = 0;\n  do {\n    i = str.indexOf(strSrc, j);\n    if (-1 != i && i < endPos) {\n      if (i != j) s += str.slice(j, i);\n\n      s += strDest;\n      j = i + strSrc.length;\n    } else {\n      s += str.slice(j);\n      break;\n    }\n  } while (i < endPos); // while\n\n  return s;\n};\n\nexports.utf8ToBytes = function (str) {\n  if (!str) {\n    return new Array();\n  }\n  var bytes = new Array();\n  var len, c;\n  len = str.length;\n  for (var i = 0; i < len; i++) {\n    c = str.charCodeAt(i);\n    if (c >= 0x010000 && c <= 0x10FFFF) {\n      bytes.push(c >> 18 & 0x07 | 0xF0);\n      bytes.push(c >> 12 & 0x3F | 0x80);\n      bytes.push(c >> 6 & 0x3F | 0x80);\n      bytes.push(c & 0x3F | 0x80);\n    } else if (c >= 0x000800 && c <= 0x00FFFF) {\n      bytes.push(c >> 12 & 0x0F | 0xE0);\n      bytes.push(c >> 6 & 0x3F | 0x80);\n      bytes.push(c & 0x3F | 0x80);\n    } else if (c >= 0x000080 && c <= 0x0007FF) {\n      bytes.push(c >> 6 & 0x1F | 0xC0);\n      bytes.push(c & 0x3F | 0x80);\n    } else {\n      bytes.push(c & 0xFF);\n    }\n  }\n  return bytes;\n};\n\nexports.bytesToUtf8 = function (utf8Bytes) {\n  var unicodeStr = \"\";\n  for (var pos = 0; pos < utf8Bytes.length;) {\n    var flag = utf8Bytes[pos];\n    var unicode = 0;\n    if (flag >>> 7 === 0) {\n      unicodeStr += String.fromCharCode(utf8Bytes[pos]);\n      pos += 1;\n    } else if ((flag & 0xFC) === 0xFC) {\n      unicode = (utf8Bytes[pos] & 0x3) << 30;\n      unicode |= (utf8Bytes[pos + 1] & 0x3F) << 24;\n      unicode |= (utf8Bytes[pos + 2] & 0x3F) << 18;\n      unicode |= (utf8Bytes[pos + 3] & 0x3F) << 12;\n      unicode |= (utf8Bytes[pos + 4] & 0x3F) << 6;\n      unicode |= utf8Bytes[pos + 5] & 0x3F;\n      unicodeStr += String.fromCharCode(unicode);\n      pos += 6;\n    } else if ((flag & 0xF8) === 0xF8) {\n      unicode = (utf8Bytes[pos] & 0x7) << 24;\n      unicode |= (utf8Bytes[pos + 1] & 0x3F) << 18;\n      unicode |= (utf8Bytes[pos + 2] & 0x3F) << 12;\n      unicode |= (utf8Bytes[pos + 3] & 0x3F) << 6;\n      unicode |= utf8Bytes[pos + 4] & 0x3F;\n      unicodeStr += String.fromCharCode(unicode);\n      pos += 5;\n    } else if ((flag & 0xF0) === 0xF0) {\n      unicode = (utf8Bytes[pos] & 0xF) << 18;\n      unicode |= (utf8Bytes[pos + 1] & 0x3F) << 12;\n      unicode |= (utf8Bytes[pos + 2] & 0x3F) << 6;\n      unicode |= utf8Bytes[pos + 3] & 0x3F;\n      unicodeStr += String.fromCharCode(unicode);\n      pos += 4;\n    } else if ((flag & 0xE0) === 0xE0) {\n      unicode = (utf8Bytes[pos] & 0x1F) << 12;;\n      unicode |= (utf8Bytes[pos + 1] & 0x3F) << 6;\n      unicode |= utf8Bytes[pos + 2] & 0x3F;\n      unicodeStr += String.fromCharCode(unicode);\n      pos += 3;\n    } else if ((flag & 0xC0) === 0xC0) {\n      //110\n      unicode = (utf8Bytes[pos] & 0x3F) << 6;\n      unicode |= utf8Bytes[pos + 1] & 0x3F;\n      unicodeStr += String.fromCharCode(unicode);\n      pos += 2;\n    } else {\n      unicodeStr += String.fromCharCode(utf8Bytes[pos]);\n      pos += 1;\n    }\n  }\n  return unicodeStr;\n};\n\nexports.utf8Encode = function utf8Encode(str) {\n  var x,\n      y,\n      output = '',\n      i = -1,\n      l;\n\n  if (str && str.length) {\n    l = str.length;\n    while ((i += 1) < l) {\n      /* Decode utf-16 surrogate pairs */\n      x = str.charCodeAt(i);\n      y = i + 1 < l ? str.charCodeAt(i + 1) : 0;\n      if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {\n        x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\n        i += 1;\n      }\n      /* Encode output as utf-8 */\n      if (x <= 0x7F) {\n        output += String.fromCharCode(x);\n      } else if (x <= 0x7FF) {\n        output += String.fromCharCode(0xC0 | x >>> 6 & 0x1F, 0x80 | x & 0x3F);\n      } else if (x <= 0xFFFF) {\n        output += String.fromCharCode(0xE0 | x >>> 12 & 0x0F, 0x80 | x >>> 6 & 0x3F, 0x80 | x & 0x3F);\n      } else if (x <= 0x1FFFFF) {\n        output += String.fromCharCode(0xF0 | x >>> 18 & 0x07, 0x80 | x >>> 12 & 0x3F, 0x80 | x >>> 6 & 0x3F, 0x80 | x & 0x3F);\n      }\n    }\n  }\n  return output;\n};\n\nexports.utf8Decode = function utf8Decode(str) {\n  var i,\n      ac,\n      c1,\n      c2,\n      c3,\n      arr = [],\n      l;\n  i = ac = c1 = c2 = c3 = 0;\n\n  if (str && str.length) {\n    l = str.length;\n    str += '';\n\n    while (i < l) {\n      c1 = str.charCodeAt(i);\n      ac += 1;\n      if (c1 < 128) {\n        arr[ac] = String.fromCharCode(c1);\n        i += 1;\n      } else if (c1 > 191 && c1 < 224) {\n        c2 = str.charCodeAt(i + 1);\n        arr[ac] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);\n        i += 2;\n      } else {\n        c2 = str.charCodeAt(i + 1);\n        c3 = str.charCodeAt(i + 2);\n        arr[ac] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n        i += 3;\n      }\n    }\n  }\n  return arr.join('');\n};\n\nexports.trim = function (str) {\n  if (!str) return str;\n\n  return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n};\n\n/**\n * @desc: 对字符串中的 <>空格\"& 标签进行转义为 &lt;, &gt;\n * @return: string.\n */\nexports.escapeHtml = function (str) {\n  // 转义.\n  if (str) {\n    str = exports.replace(str, '&', '&amp;');\n    str = exports.replace(str, '<', '&lt;');\n    str = exports.replace(str, '>', '&gt;');\n    str = exports.replace(str, ' ', '&nbsp;');\n    str = exports.replace(str, '\"', '&quot;');\n  }\n  return str || '';\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./common/string.js\n// module id = 0\n// module chunks = 0","'use strict';\n\nvar _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n    return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n} : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n};\n\n/*! bignumber.js v4.0.1 https://github.com/MikeMcl/bignumber.js/LICENCE */\n\n;(function (globalObj) {\n    'use strict';\n\n    /*\r\n      bignumber.js v4.0.1\r\n      A JavaScript library for arbitrary-precision arithmetic.\r\n      https://github.com/MikeMcl/bignumber.js\r\n      Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n      MIT Expat Licence\r\n    */\n\n    var BigNumber,\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n        notBool = ' not a boolean or binary digit',\n        roundingMode = 'rounding mode',\n        tooManyDigits = 'number type has more than 15 significant digits',\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,\n\n    // 2^53 - 1\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n\n\n    /*\r\n     * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n     * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\r\n     * exception is thrown (if ERRORS is true).\r\n     */\n    MAX = 1E9; // 0 to MAX_INT32\n\n\n    /*\r\n     * Create and return a BigNumber constructor.\r\n     */\n    function constructorFactory(config) {\n        var div,\n            parseNumeric,\n\n\n        // id tracks the caller function, so its name can be included in error messages.\n        id = 0,\n            P = BigNumber.prototype,\n            ONE = new BigNumber(1),\n\n\n        /********************************* EDITABLE DEFAULTS **********************************/\n\n        /*\r\n         * The default values below must be integers within the inclusive ranges stated.\r\n         * The values can also be changed at run-time using BigNumber.config.\r\n         */\n\n        // The maximum number of decimal places for operations involving division.\n        DECIMAL_PLACES = 20,\n\n        // 0 to MAX\n\n        /*\r\n         * The rounding mode used when rounding to the above decimal places, and when using\r\n         * toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n         * UP         0 Away from zero.\r\n         * DOWN       1 Towards zero.\r\n         * CEIL       2 Towards +Infinity.\r\n         * FLOOR      3 Towards -Infinity.\r\n         * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n         * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n         * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n         * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n         * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n         */\n        ROUNDING_MODE = 4,\n\n        // 0 to 8\n\n        // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n        // The exponent value at and beneath which toString returns exponential notation.\n        // Number type: -7\n        TO_EXP_NEG = -7,\n\n        // 0 to -MAX\n\n        // The exponent value at and above which toString returns exponential notation.\n        // Number type: 21\n        TO_EXP_POS = 21,\n\n        // 0 to MAX\n\n        // RANGE : [MIN_EXP, MAX_EXP]\n\n        // The minimum exponent value, beneath which underflow to zero occurs.\n        // Number type: -324  (5e-324)\n        MIN_EXP = -1e7,\n\n        // -1 to -MAX\n\n        // The maximum exponent value, above which overflow to Infinity occurs.\n        // Number type:  308  (1.7976931348623157e+308)\n        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n        MAX_EXP = 1e7,\n\n        // 1 to MAX\n\n        // Whether BigNumber Errors are ever thrown.\n        ERRORS = true,\n\n        // true or false\n\n        // Change to intValidatorNoErrors if ERRORS is false.\n        isValidInt = intValidatorWithErrors,\n\n        // intValidatorWithErrors/intValidatorNoErrors\n\n        // Whether to use cryptographically-secure random number generation, if available.\n        CRYPTO = false,\n\n        // true or false\n\n        /*\r\n         * The modulo mode used when calculating the modulus: a mod n.\r\n         * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n         * The remainder (r) is calculated as: r = a - n * q.\r\n         *\r\n         * UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n         * DOWN      1 The remainder has the same sign as the dividend.\r\n         *             This modulo mode is commonly known as 'truncated division' and is\r\n         *             equivalent to (a % n) in JavaScript.\r\n         * FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n         * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n         * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n         *             The remainder is always positive.\r\n         *\r\n         * The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n         * modes are commonly used for the modulus operation.\r\n         * Although the other rounding modes can also be used, they may not give useful results.\r\n         */\n        MODULO_MODE = 1,\n\n        // 0 to 9\n\n        // The maximum number of significant digits of the result of the toPower operation.\n        // If POW_PRECISION is 0, there will be unlimited significant digits.\n        POW_PRECISION = 0,\n\n        // 0 to MAX\n\n        // The format specification used by the BigNumber.prototype.toFormat method.\n        FORMAT = {\n            decimalSeparator: '.',\n            groupSeparator: ',',\n            groupSize: 3,\n            secondaryGroupSize: 0,\n            fractionGroupSeparator: '\\xA0', // non-breaking space\n            fractionGroupSize: 0\n        };\n\n        /******************************************************************************************/\n\n        // CONSTRUCTOR\n\n\n        /*\r\n         * The BigNumber constructor and exported function.\r\n         * Create and return a new instance of a BigNumber object.\r\n         *\r\n         * n {number|string|BigNumber} A numeric value.\r\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n         */\n        function BigNumber(n, b) {\n            var c,\n                e,\n                i,\n                num,\n                len,\n                str,\n                x = this;\n\n            // Enable constructor usage without new.\n            if (!(x instanceof BigNumber)) {\n\n                // 'BigNumber() constructor call without new: {n}'\n                if (ERRORS) raise(26, 'constructor call without new', n);\n                return new BigNumber(n, b);\n            }\n\n            // 'new BigNumber() base not an integer: {b}'\n            // 'new BigNumber() base out of range: {b}'\n            if (b == null || !isValidInt(b, 2, 64, id, 'base')) {\n\n                // Duplicate.\n                if (n instanceof BigNumber) {\n                    x.s = n.s;\n                    x.e = n.e;\n                    x.c = (n = n.c) ? n.slice() : n;\n                    id = 0;\n                    return;\n                }\n\n                if ((num = typeof n == 'number') && n * 0 == 0) {\n                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;\n\n                    // Fast path for integers.\n                    if (n === ~~n) {\n                        for (e = 0, i = n; i >= 10; i /= 10, e++) {}\n                        x.e = e;\n                        x.c = [n];\n                        id = 0;\n                        return;\n                    }\n\n                    str = n + '';\n                } else {\n                    if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, num);\n                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n                }\n            } else {\n                b = b | 0;\n                str = n + '';\n\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\n                // Allow exponential notation to be used with base 10 argument.\n                if (b == 10) {\n                    x = new BigNumber(n instanceof BigNumber ? n : str);\n                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n                }\n\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n                // Any number in exponential form will fail due to the [Ee][+-].\n                if ((num = typeof n == 'number') && n * 0 != 0 || !new RegExp('^-?' + (c = '[' + ALPHABET.slice(0, b) + ']+') + '(?:\\\\.' + c + ')?$', b < 37 ? 'i' : '').test(str)) {\n                    return parseNumeric(x, str, num, b);\n                }\n\n                if (num) {\n                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\n\n                    if (ERRORS && str.replace(/^0\\.0*|\\./, '').length > 15) {\n\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\n                        raise(id, tooManyDigits, n);\n                    }\n\n                    // Prevent later check for length on converted number.\n                    num = false;\n                } else {\n                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n                }\n\n                str = convertBase(str, 10, b, x.s);\n            }\n\n            // Decimal point?\n            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n            // Exponential form?\n            if ((i = str.search(/e/i)) > 0) {\n\n                // Determine exponent.\n                if (e < 0) e = i;\n                e += +str.slice(i + 1);\n                str = str.substring(0, i);\n            } else if (e < 0) {\n\n                // Integer.\n                e = str.length;\n            }\n\n            // Determine leading zeros.\n            for (i = 0; str.charCodeAt(i) === 48; i++) {}\n\n            // Determine trailing zeros.\n            for (len = str.length; str.charCodeAt(--len) === 48;) {}\n            str = str.slice(i, len + 1);\n\n            if (str) {\n                len = str.length;\n\n                // Disallow numbers with over 15 significant digits if number type.\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\n                if (num && ERRORS && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\n                    raise(id, tooManyDigits, x.s * n);\n                }\n\n                e = e - i - 1;\n\n                // Overflow?\n                if (e > MAX_EXP) {\n\n                    // Infinity.\n                    x.c = x.e = null;\n\n                    // Underflow?\n                } else if (e < MIN_EXP) {\n\n                    // Zero.\n                    x.c = [x.e = 0];\n                } else {\n                    x.e = e;\n                    x.c = [];\n\n                    // Transform base\n\n                    // e is the base 10 exponent.\n                    // i is where to slice str to get the first element of the coefficient array.\n                    i = (e + 1) % LOG_BASE;\n                    if (e < 0) i += LOG_BASE;\n\n                    if (i < len) {\n                        if (i) x.c.push(+str.slice(0, i));\n\n                        for (len -= LOG_BASE; i < len;) {\n                            x.c.push(+str.slice(i, i += LOG_BASE));\n                        }\n\n                        str = str.slice(i);\n                        i = LOG_BASE - str.length;\n                    } else {\n                        i -= len;\n                    }\n\n                    for (; i--; str += '0') {}\n                    x.c.push(+str);\n                }\n            } else {\n\n                // Zero.\n                x.c = [x.e = 0];\n            }\n\n            id = 0;\n        }\n\n        // CONSTRUCTOR PROPERTIES\n\n\n        BigNumber.another = constructorFactory;\n\n        BigNumber.ROUND_UP = 0;\n        BigNumber.ROUND_DOWN = 1;\n        BigNumber.ROUND_CEIL = 2;\n        BigNumber.ROUND_FLOOR = 3;\n        BigNumber.ROUND_HALF_UP = 4;\n        BigNumber.ROUND_HALF_DOWN = 5;\n        BigNumber.ROUND_HALF_EVEN = 6;\n        BigNumber.ROUND_HALF_CEIL = 7;\n        BigNumber.ROUND_HALF_FLOOR = 8;\n        BigNumber.EUCLID = 9;\n\n        /*\r\n         * Configure infrequently-changing library-wide settings.\r\n         *\r\n         * Accept an object or an argument list, with one or many of the following properties or\r\n         * parameters respectively:\r\n         *\r\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\r\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\r\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\r\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\r\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\r\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\r\n         *   MODULO_MODE     {number}           0 to 9 inclusive\r\n         *   POW_PRECISION   {number}           0 to MAX inclusive\r\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\r\n         *      decimalSeparator       {string}\r\n         *      groupSeparator         {string}\r\n         *      groupSize              {number}\r\n         *      secondaryGroupSize     {number}\r\n         *      fractionGroupSeparator {string}\r\n         *      fractionGroupSize      {number}\r\n         *\r\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n         *\r\n         * E.g.\r\n         * BigNumber.config(20, 4) is equivalent to\r\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n         *\r\n         * Ignore properties/parameters set to null or undefined.\r\n         * Return an object with the properties current values.\r\n         */\n        BigNumber.config = BigNumber.set = function () {\n            var v,\n                p,\n                i = 0,\n                r = {},\n                a = arguments,\n                o = a[0],\n                has = o && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) == 'object' ? function () {\n                if (o.hasOwnProperty(p)) return (v = o[p]) != null;\n            } : function () {\n                if (a.length > i) return (v = a[i++]) != null;\n            };\n\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n            // 'config() DECIMAL_PLACES not an integer: {v}'\n            // 'config() DECIMAL_PLACES out of range: {v}'\n            if (has(p = 'DECIMAL_PLACES') && isValidInt(v, 0, MAX, 2, p)) {\n                DECIMAL_PLACES = v | 0;\n            }\n            r[p] = DECIMAL_PLACES;\n\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n            // 'config() ROUNDING_MODE not an integer: {v}'\n            // 'config() ROUNDING_MODE out of range: {v}'\n            if (has(p = 'ROUNDING_MODE') && isValidInt(v, 0, 8, 2, p)) {\n                ROUNDING_MODE = v | 0;\n            }\n            r[p] = ROUNDING_MODE;\n\n            // EXPONENTIAL_AT {number|number[]}\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\n            // 'config() EXPONENTIAL_AT out of range: {v}'\n            if (has(p = 'EXPONENTIAL_AT')) {\n\n                if (isArray(v)) {\n                    if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {\n                        TO_EXP_NEG = v[0] | 0;\n                        TO_EXP_POS = v[1] | 0;\n                    }\n                } else if (isValidInt(v, -MAX, MAX, 2, p)) {\n                    TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);\n                }\n            }\n            r[p] = [TO_EXP_NEG, TO_EXP_POS];\n\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n            // 'config() RANGE not an integer: {v}'\n            // 'config() RANGE cannot be zero: {v}'\n            // 'config() RANGE out of range: {v}'\n            if (has(p = 'RANGE')) {\n\n                if (isArray(v)) {\n                    if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {\n                        MIN_EXP = v[0] | 0;\n                        MAX_EXP = v[1] | 0;\n                    }\n                } else if (isValidInt(v, -MAX, MAX, 2, p)) {\n                    if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);else if (ERRORS) raise(2, p + ' cannot be zero', v);\n                }\n            }\n            r[p] = [MIN_EXP, MAX_EXP];\n\n            // ERRORS {boolean|number} true, false, 1 or 0.\n            // 'config() ERRORS not a boolean or binary digit: {v}'\n            if (has(p = 'ERRORS')) {\n\n                if (v === !!v || v === 1 || v === 0) {\n                    id = 0;\n                    isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;\n                } else if (ERRORS) {\n                    raise(2, p + notBool, v);\n                }\n            }\n            r[p] = ERRORS;\n\n            // CRYPTO {boolean|number} true, false, 1 or 0.\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\n            // 'config() crypto unavailable: {crypto}'\n            if (has(p = 'CRYPTO')) {\n\n                if (v === true || v === false || v === 1 || v === 0) {\n                    if (v) {\n                        v = typeof crypto == 'undefined';\n                        if (!v && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                            CRYPTO = true;\n                        } else if (ERRORS) {\n                            raise(2, 'crypto unavailable', v ? void 0 : crypto);\n                        } else {\n                            CRYPTO = false;\n                        }\n                    } else {\n                        CRYPTO = false;\n                    }\n                } else if (ERRORS) {\n                    raise(2, p + notBool, v);\n                }\n            }\n            r[p] = CRYPTO;\n\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n            // 'config() MODULO_MODE not an integer: {v}'\n            // 'config() MODULO_MODE out of range: {v}'\n            if (has(p = 'MODULO_MODE') && isValidInt(v, 0, 9, 2, p)) {\n                MODULO_MODE = v | 0;\n            }\n            r[p] = MODULO_MODE;\n\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n            // 'config() POW_PRECISION not an integer: {v}'\n            // 'config() POW_PRECISION out of range: {v}'\n            if (has(p = 'POW_PRECISION') && isValidInt(v, 0, MAX, 2, p)) {\n                POW_PRECISION = v | 0;\n            }\n            r[p] = POW_PRECISION;\n\n            // FORMAT {object}\n            // 'config() FORMAT not an object: {v}'\n            if (has(p = 'FORMAT')) {\n\n                if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) == 'object') {\n                    FORMAT = v;\n                } else if (ERRORS) {\n                    raise(2, p + ' not an object', v);\n                }\n            }\n            r[p] = FORMAT;\n\n            return r;\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the maximum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\n        BigNumber.max = function () {\n            return maxOrMin(arguments, P.lt);\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the minimum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\n        BigNumber.min = function () {\n            return maxOrMin(arguments, P.gt);\n        };\n\n        /*\r\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n         * zeros are produced).\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         *\r\n         * 'random() decimal places not an integer: {dp}'\r\n         * 'random() decimal places out of range: {dp}'\r\n         * 'random() crypto unavailable: {crypto}'\r\n         */\n        BigNumber.random = function () {\n            var pow2_53 = 0x20000000000000;\n\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n            // Check if Math.random() produces more than 32 bits of randomness.\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n            var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n                return mathfloor(Math.random() * pow2_53);\n            } : function () {\n                return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n            };\n\n            return function (dp) {\n                var a,\n                    b,\n                    e,\n                    k,\n                    v,\n                    i = 0,\n                    c = [],\n                    rand = new BigNumber(ONE);\n\n                dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;\n                k = mathceil(dp / LOG_BASE);\n\n                if (CRYPTO) {\n\n                    // Browsers supporting crypto.getRandomValues.\n                    if (crypto.getRandomValues) {\n\n                        a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n                        for (; i < k;) {\n\n                            // 53 bits:\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                            //                                     11111 11111111 11111111\n                            // 0x20000 is 2^21.\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n                            // Rejection sampling:\n                            // 0 <= v < 9007199254740992\n                            // Probability that v >= 9e15, is\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n                            if (v >= 9e15) {\n                                b = crypto.getRandomValues(new Uint32Array(2));\n                                a[i] = b[0];\n                                a[i + 1] = b[1];\n                            } else {\n\n                                // 0 <= v <= 8999999999999999\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 2;\n                            }\n                        }\n                        i = k / 2;\n\n                        // Node.js supporting crypto.randomBytes.\n                    } else if (crypto.randomBytes) {\n\n                        // buffer\n                        a = crypto.randomBytes(k *= 7);\n\n                        for (; i < k;) {\n\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                            // 0 <= v < 9007199254740992\n                            v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n                            if (v >= 9e15) {\n                                crypto.randomBytes(7).copy(a, i);\n                            } else {\n\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 7;\n                            }\n                        }\n                        i = k / 7;\n                    } else {\n                        CRYPTO = false;\n                        if (ERRORS) raise(14, 'crypto unavailable', crypto);\n                    }\n                }\n\n                // Use Math.random.\n                if (!CRYPTO) {\n\n                    for (; i < k;) {\n                        v = random53bitInt();\n                        if (v < 9e15) c[i++] = v % 1e14;\n                    }\n                }\n\n                k = c[--i];\n                dp %= LOG_BASE;\n\n                // Convert trailing digits to zeros according to dp.\n                if (k && dp) {\n                    v = POWS_TEN[LOG_BASE - dp];\n                    c[i] = mathfloor(k / v) * v;\n                }\n\n                // Remove trailing elements which are zero.\n                for (; c[i] === 0; c.pop(), i--) {}\n\n                // Zero?\n                if (i < 0) {\n                    c = [e = 0];\n                } else {\n\n                    // Remove leading elements which are zero and adjust exponent accordingly.\n                    for (e = -1; c[0] === 0; c.shift(), e -= LOG_BASE) {}\n\n                    // Count the digits of the first element of c to determine leading zeros, and...\n                    for (i = 1, v = c[0]; v >= 10; v /= 10, i++) {}\n\n                    // adjust the exponent accordingly.\n                    if (i < LOG_BASE) e -= LOG_BASE - i;\n                }\n\n                rand.e = e;\n                rand.c = c;\n                return rand;\n            };\n        }();\n\n        // PRIVATE FUNCTIONS\n\n\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\n        function convertBase(str, baseOut, baseIn, sign) {\n            var d,\n                e,\n                k,\n                r,\n                x,\n                xc,\n                y,\n                i = str.indexOf('.'),\n                dp = DECIMAL_PLACES,\n                rm = ROUNDING_MODE;\n\n            if (baseIn < 37) str = str.toLowerCase();\n\n            // Non-integer.\n            if (i >= 0) {\n                k = POW_PRECISION;\n\n                // Unlimited precision.\n                POW_PRECISION = 0;\n                str = str.replace('.', '');\n                y = new BigNumber(baseIn);\n                x = y.pow(str.length - i);\n                POW_PRECISION = k;\n\n                // Convert str as if an integer, then restore the fraction part by dividing the\n                // result by its base raised to a power.\n                y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);\n                y.e = y.c.length;\n            }\n\n            // Convert the number as integer.\n            xc = toBaseOut(str, baseIn, baseOut);\n            e = k = xc.length;\n\n            // Remove trailing zeros.\n            for (; xc[--k] == 0; xc.pop()) {}\n            if (!xc[0]) return '0';\n\n            if (i < 0) {\n                --e;\n            } else {\n                x.c = xc;\n                x.e = e;\n\n                // sign is needed for correct rounding.\n                x.s = sign;\n                x = div(x, y, dp, rm, baseOut);\n                xc = x.c;\n                r = x.r;\n                e = x.e;\n            }\n\n            d = e + dp + 1;\n\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\n            i = xc[d];\n            k = baseOut / 2;\n            r = r || d < 0 || xc[d + 1] != null;\n\n            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));\n\n            if (d < 1 || !xc[0]) {\n\n                // 1^-dp or 0.\n                str = r ? toFixedPoint('1', -dp) : '0';\n            } else {\n                xc.length = d;\n\n                if (r) {\n\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\n                    for (--baseOut; ++xc[--d] > baseOut;) {\n                        xc[d] = 0;\n\n                        if (!d) {\n                            ++e;\n                            xc.unshift(1);\n                        }\n                    }\n                }\n\n                // Determine trailing zeros.\n                for (k = xc.length; !xc[--k];) {}\n\n                // E.g. [4, 11, 15] becomes 4bf.\n                for (i = 0, str = ''; i <= k; str += ALPHABET.charAt(xc[i++])) {}\n                str = toFixedPoint(str, e);\n            }\n\n            // The caller will add the sign.\n            return str;\n        }\n\n        // Perform division in the specified base. Called by div and convertBase.\n        div = function () {\n\n            // Assume non-zero x and k.\n            function multiply(x, k, base) {\n                var m,\n                    temp,\n                    xlo,\n                    xhi,\n                    carry = 0,\n                    i = x.length,\n                    klo = k % SQRT_BASE,\n                    khi = k / SQRT_BASE | 0;\n\n                for (x = x.slice(); i--;) {\n                    xlo = x[i] % SQRT_BASE;\n                    xhi = x[i] / SQRT_BASE | 0;\n                    m = khi * xlo + xhi * klo;\n                    temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n                    x[i] = temp % base;\n                }\n\n                if (carry) x.unshift(carry);\n\n                return x;\n            }\n\n            function compare(a, b, aL, bL) {\n                var i, cmp;\n\n                if (aL != bL) {\n                    cmp = aL > bL ? 1 : -1;\n                } else {\n\n                    for (i = cmp = 0; i < aL; i++) {\n\n                        if (a[i] != b[i]) {\n                            cmp = a[i] > b[i] ? 1 : -1;\n                            break;\n                        }\n                    }\n                }\n                return cmp;\n            }\n\n            function subtract(a, b, aL, base) {\n                var i = 0;\n\n                // Subtract b from a.\n                for (; aL--;) {\n                    a[aL] -= i;\n                    i = a[aL] < b[aL] ? 1 : 0;\n                    a[aL] = i * base + a[aL] - b[aL];\n                }\n\n                // Remove leading zeros.\n                for (; !a[0] && a.length > 1; a.shift()) {}\n            }\n\n            // x: dividend, y: divisor.\n            return function (x, y, dp, rm, base) {\n                var cmp,\n                    e,\n                    i,\n                    more,\n                    n,\n                    prod,\n                    prodL,\n                    q,\n                    qc,\n                    rem,\n                    remL,\n                    rem0,\n                    xi,\n                    xL,\n                    yc0,\n                    yL,\n                    yz,\n                    s = x.s == y.s ? 1 : -1,\n                    xc = x.c,\n                    yc = y.c;\n\n                // Either NaN, Infinity or 0?\n                if (!xc || !xc[0] || !yc || !yc[0]) {\n\n                    return new BigNumber(\n\n                    // Return NaN if either NaN, or both Infinity or 0.\n                    !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n\n                    // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n                    xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n                }\n\n                q = new BigNumber(s);\n                qc = q.c = [];\n                e = x.e - y.e;\n                s = dp + e + 1;\n\n                if (!base) {\n                    base = BASE;\n                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n                    s = s / LOG_BASE | 0;\n                }\n\n                // Result exponent may be one less then the current value of e.\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n                for (i = 0; yc[i] == (xc[i] || 0); i++) {}\n                if (yc[i] > (xc[i] || 0)) e--;\n\n                if (s < 0) {\n                    qc.push(1);\n                    more = true;\n                } else {\n                    xL = xc.length;\n                    yL = yc.length;\n                    i = 0;\n                    s += 2;\n\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n                    n = mathfloor(base / (yc[0] + 1));\n\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\n                    if (n > 1) {\n                        yc = multiply(yc, n, base);\n                        xc = multiply(xc, n, base);\n                        yL = yc.length;\n                        xL = xc.length;\n                    }\n\n                    xi = yL;\n                    rem = xc.slice(0, yL);\n                    remL = rem.length;\n\n                    // Add zeros to make remainder as long as divisor.\n                    for (; remL < yL; rem[remL++] = 0) {}\n                    yz = yc.slice();\n                    yz.unshift(0);\n                    yc0 = yc[0];\n                    if (yc[1] >= base / 2) yc0++;\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\n\n                    do {\n                        n = 0;\n\n                        // Compare divisor and remainder.\n                        cmp = compare(yc, rem, yL, remL);\n\n                        // If divisor < remainder.\n                        if (cmp < 0) {\n\n                            // Calculate trial digit, n.\n\n                            rem0 = rem[0];\n                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n                            // n is how many times the divisor goes into the current remainder.\n                            n = mathfloor(rem0 / yc0);\n\n                            //  Algorithm:\n                            //  1. product = divisor * trial digit (n)\n                            //  2. if product > remainder: product -= divisor, n--\n                            //  3. remainder -= product\n                            //  4. if product was < remainder at 2:\n                            //    5. compare new remainder and divisor\n                            //    6. If remainder > divisor: remainder -= divisor, n++\n\n                            if (n > 1) {\n\n                                // n may be > base only when base is 3.\n                                if (n >= base) n = base - 1;\n\n                                // product = divisor * trial digit.\n                                prod = multiply(yc, n, base);\n                                prodL = prod.length;\n                                remL = rem.length;\n\n                                // Compare product and remainder.\n                                // If product > remainder.\n                                // Trial digit n too high.\n                                // n is 1 too high about 5% of the time, and is not known to have\n                                // ever been more than 1 too high.\n                                while (compare(prod, rem, prodL, remL) == 1) {\n                                    n--;\n\n                                    // Subtract divisor from product.\n                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                                    prodL = prod.length;\n                                    cmp = 1;\n                                }\n                            } else {\n\n                                // n is 0 or 1, cmp is -1.\n                                // If n is 0, there is no need to compare yc and rem again below,\n                                // so change cmp to 1 to avoid it.\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                                if (n == 0) {\n\n                                    // divisor < remainder, so n must be at least 1.\n                                    cmp = n = 1;\n                                }\n\n                                // product = divisor\n                                prod = yc.slice();\n                                prodL = prod.length;\n                            }\n\n                            if (prodL < remL) prod.unshift(0);\n\n                            // Subtract product from remainder.\n                            subtract(rem, prod, remL, base);\n                            remL = rem.length;\n\n                            // If product was < remainder.\n                            if (cmp == -1) {\n\n                                // Compare divisor and new remainder.\n                                // If divisor < new remainder, subtract divisor from remainder.\n                                // Trial digit n too low.\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                                while (compare(yc, rem, yL, remL) < 1) {\n                                    n++;\n\n                                    // Subtract divisor from remainder.\n                                    subtract(rem, yL < remL ? yz : yc, remL, base);\n                                    remL = rem.length;\n                                }\n                            }\n                        } else if (cmp === 0) {\n                            n++;\n                            rem = [0];\n                        } // else cmp === 1 and n will be 0\n\n                        // Add the next digit, n, to the result array.\n                        qc[i++] = n;\n\n                        // Update the remainder.\n                        if (rem[0]) {\n                            rem[remL++] = xc[xi] || 0;\n                        } else {\n                            rem = [xc[xi]];\n                            remL = 1;\n                        }\n                    } while ((xi++ < xL || rem[0] != null) && s--);\n\n                    more = rem[0] != null;\n\n                    // Leading zero?\n                    if (!qc[0]) qc.shift();\n                }\n\n                if (base == BASE) {\n\n                    // To calculate q.e, first get the number of digits of qc[0].\n                    for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) {}\n                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n                    // Caller is convertBase.\n                } else {\n                    q.e = e;\n                    q.r = +more;\n                }\n\n                return q;\n            };\n        }();\n\n        /*\r\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n         * notation rounded to the specified decimal places or significant digits.\r\n         *\r\n         * n is a BigNumber.\r\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\r\n         * rm is the rounding mode.\r\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\r\n         */\n        function format(n, i, rm, caller) {\n            var c0, e, ne, len, str;\n\n            rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode) ? rm | 0 : ROUNDING_MODE;\n\n            if (!n.c) return n.toString();\n            c0 = n.c[0];\n            ne = n.e;\n\n            if (i == null) {\n                str = coeffToString(n.c);\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne);\n            } else {\n                n = round(new BigNumber(n), i, rm);\n\n                // n.e may have changed if the value was rounded up.\n                e = n.e;\n\n                str = coeffToString(n.c);\n                len = str.length;\n\n                // toPrecision returns exponential notation if the number of significant digits\n                // specified is less than the number of digits necessary to represent the integer\n                // part of the value in fixed-point notation.\n\n                // Exponential notation.\n                if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {\n\n                    // Append zeros?\n                    for (; len < i; str += '0', len++) {}\n                    str = toExponential(str, e);\n\n                    // Fixed-point notation.\n                } else {\n                    i -= ne;\n                    str = toFixedPoint(str, e);\n\n                    // Append zeros?\n                    if (e + 1 > len) {\n                        if (--i > 0) for (str += '.'; i--; str += '0') {}\n                    } else {\n                        i += e - len;\n                        if (i > 0) {\n                            if (e + 1 == len) str += '.';\n                            for (; i--; str += '0') {}\n                        }\n                    }\n                }\n            }\n\n            return n.s < 0 && c0 ? '-' + str : str;\n        }\n\n        // Handle BigNumber.max and BigNumber.min.\n        function maxOrMin(args, method) {\n            var m,\n                n,\n                i = 0;\n\n            if (isArray(args[0])) args = args[0];\n            m = new BigNumber(args[0]);\n\n            for (; ++i < args.length;) {\n                n = new BigNumber(args[i]);\n\n                // If any number is NaN, return NaN.\n                if (!n.s) {\n                    m = n;\n                    break;\n                } else if (method.call(m, n)) {\n                    m = n;\n                }\n            }\n\n            return m;\n        }\n\n        /*\r\n         * Return true if n is an integer in range, otherwise throw.\r\n         * Use for argument validation when ERRORS is true.\r\n         */\n        function intValidatorWithErrors(n, min, max, caller, name) {\n            if (n < min || n > max || n != truncate(n)) {\n                raise(caller, (name || 'decimal places') + (n < min || n > max ? ' out of range' : ' not an integer'), n);\n            }\n\n            return true;\n        }\n\n        /*\r\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n         * Called by minus, plus and times.\r\n         */\n        function normalise(n, c, e) {\n            var i = 1,\n                j = c.length;\n\n            // Remove trailing zeros.\n            for (; !c[--j]; c.pop()) {}\n\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\n            for (j = c[0]; j >= 10; j /= 10, i++) {}\n\n            // Overflow?\n            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n\n                // Infinity.\n                n.c = n.e = null;\n\n                // Underflow?\n            } else if (e < MIN_EXP) {\n\n                // Zero.\n                n.c = [n.e = 0];\n            } else {\n                n.e = e;\n                n.c = c;\n            }\n\n            return n;\n        }\n\n        // Handle values that fail the validity test in BigNumber.\n        parseNumeric = function () {\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n                dotAfter = /^([^.]+)\\.$/,\n                dotBefore = /^\\.([^.]+)$/,\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n\n            return function (x, str, num, b) {\n                var base,\n                    s = num ? str : str.replace(whitespaceOrPlus, '');\n\n                // No exception on ±Infinity or NaN.\n                if (isInfinityOrNaN.test(s)) {\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n                } else {\n                    if (!num) {\n\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n                        s = s.replace(basePrefix, function (m, p1, p2) {\n                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                            return !b || b == base ? p1 : m;\n                        });\n\n                        if (b) {\n                            base = b;\n\n                            // E.g. '1.' to '1', '.1' to '0.1'\n                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n                        }\n\n                        if (str != s) return new BigNumber(s, base);\n                    }\n\n                    // 'new BigNumber() not a number: {n}'\n                    // 'new BigNumber() not a base {b} number: {n}'\n                    if (ERRORS) raise(id, 'not a' + (b ? ' base ' + b : '') + ' number', str);\n                    x.s = null;\n                }\n\n                x.c = x.e = null;\n                id = 0;\n            };\n        }();\n\n        // Throw a BigNumber Error.\n        function raise(caller, msg, val) {\n            var error = new Error(['new BigNumber', // 0\n            'cmp', // 1\n            'config', // 2\n            'div', // 3\n            'divToInt', // 4\n            'eq', // 5\n            'gt', // 6\n            'gte', // 7\n            'lt', // 8\n            'lte', // 9\n            'minus', // 10\n            'mod', // 11\n            'plus', // 12\n            'precision', // 13\n            'random', // 14\n            'round', // 15\n            'shift', // 16\n            'times', // 17\n            'toDigits', // 18\n            'toExponential', // 19\n            'toFixed', // 20\n            'toFormat', // 21\n            'toFraction', // 22\n            'pow', // 23\n            'toPrecision', // 24\n            'toString', // 25\n            'BigNumber' // 26\n            ][caller] + '() ' + msg + ': ' + val);\n\n            error.name = 'BigNumber Error';\n            id = 0;\n            throw error;\n        }\n\n        /*\r\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n         * If r is truthy, it is known that there are more digits after the rounding digit.\r\n         */\n        function round(x, sd, rm, r) {\n            var d,\n                i,\n                j,\n                k,\n                n,\n                ni,\n                rd,\n                xc = x.c,\n                pows10 = POWS_TEN;\n\n            // if x is not Infinity or NaN...\n            if (xc) {\n\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\n                // ni is the index of n within x.c.\n                // d is the number of digits of n.\n                // i is the index of rd within n including leading zeros.\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\n                out: {\n\n                    // Get the number of digits of the first element of xc.\n                    for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) {}\n                    i = sd - d;\n\n                    // If the rounding digit is in the first element of xc...\n                    if (i < 0) {\n                        i += LOG_BASE;\n                        j = sd;\n                        n = xc[ni = 0];\n\n                        // Get the rounding digit at index j of n.\n                        rd = n / pows10[d - j - 1] % 10 | 0;\n                    } else {\n                        ni = mathceil((i + 1) / LOG_BASE);\n\n                        if (ni >= xc.length) {\n\n                            if (r) {\n\n                                // Needed by sqrt.\n                                for (; xc.length <= ni; xc.push(0)) {}\n                                n = rd = 0;\n                                d = 1;\n                                i %= LOG_BASE;\n                                j = i - LOG_BASE + 1;\n                            } else {\n                                break out;\n                            }\n                        } else {\n                            n = k = xc[ni];\n\n                            // Get the number of digits of n.\n                            for (d = 1; k >= 10; k /= 10, d++) {}\n\n                            // Get the index of rd within n.\n                            i %= LOG_BASE;\n\n                            // Get the index of rd within n, adjusted for leading zeros.\n                            // The number of leading zeros of n is given by LOG_BASE - d.\n                            j = i - LOG_BASE + d;\n\n                            // Get the rounding digit at index j of n.\n                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n                        }\n                    }\n\n                    r = r || sd < 0 ||\n\n                    // Are there any non-zero digits after the rounding digit?\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n                    xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n\n                    r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n\n                    // Check whether the digit to the left of the rounding digit is odd.\n                    (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n                    if (sd < 1 || !xc[0]) {\n                        xc.length = 0;\n\n                        if (r) {\n\n                            // Convert sd to decimal places.\n                            sd -= x.e + 1;\n\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n                            x.e = -sd || 0;\n                        } else {\n\n                            // Zero.\n                            xc[0] = x.e = 0;\n                        }\n\n                        return x;\n                    }\n\n                    // Remove excess digits.\n                    if (i == 0) {\n                        xc.length = ni;\n                        k = 1;\n                        ni--;\n                    } else {\n                        xc.length = ni + 1;\n                        k = pows10[LOG_BASE - i];\n\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n                        // j > 0 means i > number of leading zeros of n.\n                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n                    }\n\n                    // Round up?\n                    if (r) {\n\n                        for (;;) {\n\n                            // If the digit to be rounded up is in the first element of xc...\n                            if (ni == 0) {\n\n                                // i will be the length of xc[0] before k is added.\n                                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) {}\n                                j = xc[0] += k;\n                                for (k = 1; j >= 10; j /= 10, k++) {}\n\n                                // if i != k the length has increased.\n                                if (i != k) {\n                                    x.e++;\n                                    if (xc[0] == BASE) xc[0] = 1;\n                                }\n\n                                break;\n                            } else {\n                                xc[ni] += k;\n                                if (xc[ni] != BASE) break;\n                                xc[ni--] = 0;\n                                k = 1;\n                            }\n                        }\n                    }\n\n                    // Remove trailing zeros.\n                    for (i = xc.length; xc[--i] === 0; xc.pop()) {}\n                }\n\n                // Overflow? Infinity.\n                if (x.e > MAX_EXP) {\n                    x.c = x.e = null;\n\n                    // Underflow? Zero.\n                } else if (x.e < MIN_EXP) {\n                    x.c = [x.e = 0];\n                }\n            }\n\n            return x;\n        }\n\n        // PROTOTYPE/INSTANCE METHODS\n\n\n        /*\r\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n         */\n        P.absoluteValue = P.abs = function () {\n            var x = new BigNumber(this);\n            if (x.s < 0) x.s = 1;\n            return x;\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of Infinity.\r\n         */\n        P.ceil = function () {\n            return round(new BigNumber(this), this.e + 1, 2);\n        };\n\n        /*\r\n         * Return\r\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * 0 if they have the same value,\r\n         * or null if the value of either is NaN.\r\n         */\n        P.comparedTo = P.cmp = function (y, b) {\n            id = 1;\n            return compare(this, new BigNumber(y, b));\n        };\n\n        /*\r\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\r\n         * of this BigNumber is ±Infinity or NaN.\r\n         */\n        P.decimalPlaces = P.dp = function () {\n            var n,\n                v,\n                c = this.c;\n\n            if (!c) return null;\n            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n            // Subtract the number of trailing zeros of the last number.\n            if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) {}\n            if (n < 0) n = 0;\n\n            return n;\n        };\n\n        /*\r\n         *  n / 0 = I\r\n         *  n / N = N\r\n         *  n / I = 0\r\n         *  0 / n = 0\r\n         *  0 / 0 = N\r\n         *  0 / N = N\r\n         *  0 / I = 0\r\n         *  N / n = N\r\n         *  N / 0 = N\r\n         *  N / N = N\r\n         *  N / I = N\r\n         *  I / n = I\r\n         *  I / 0 = I\r\n         *  I / N = N\r\n         *  I / I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\n        P.dividedBy = P.div = function (y, b) {\n            id = 3;\n            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n         * BigNumber by the value of BigNumber(y, b).\r\n         */\n        P.dividedToIntegerBy = P.divToInt = function (y, b) {\n            id = 4;\n            return div(this, new BigNumber(y, b), 0, 1);\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\n        P.equals = P.eq = function (y, b) {\n            id = 5;\n            return compare(this, new BigNumber(y, b)) === 0;\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of -Infinity.\r\n         */\n        P.floor = function () {\n            return round(new BigNumber(this), this.e + 1, 3);\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\n        P.greaterThan = P.gt = function (y, b) {\n            id = 6;\n            return compare(this, new BigNumber(y, b)) > 0;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is greater than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\n        P.greaterThanOrEqualTo = P.gte = function (y, b) {\n            id = 7;\n            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\r\n         */\n        P.isFinite = function () {\n            return !!this.c;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n         */\n        P.isInteger = P.isInt = function () {\n            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\r\n         */\n        P.isNaN = function () {\n            return !this.s;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\r\n         */\n        P.isNegative = P.isNeg = function () {\n            return this.s < 0;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\r\n         */\n        P.isZero = function () {\n            return !!this.c && this.c[0] == 0;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\n        P.lessThan = P.lt = function (y, b) {\n            id = 8;\n            return compare(this, new BigNumber(y, b)) < 0;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is less than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\n        P.lessThanOrEqualTo = P.lte = function (y, b) {\n            id = 9;\n            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n        };\n\n        /*\r\n         *  n - 0 = n\r\n         *  n - N = N\r\n         *  n - I = -I\r\n         *  0 - n = -n\r\n         *  0 - 0 = 0\r\n         *  0 - N = N\r\n         *  0 - I = -I\r\n         *  N - n = N\r\n         *  N - 0 = N\r\n         *  N - N = N\r\n         *  N - I = N\r\n         *  I - n = I\r\n         *  I - 0 = I\r\n         *  I - N = N\r\n         *  I - I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n         * BigNumber(y, b).\r\n         */\n        P.minus = P.sub = function (y, b) {\n            var i,\n                j,\n                t,\n                xLTy,\n                x = this,\n                a = x.s;\n\n            id = 10;\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.plus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Either Infinity?\n                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n                // Either zero?\n                if (!xc[0] || !yc[0]) {\n\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                    return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n\n                    // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n                    ROUNDING_MODE == 3 ? -0 : 0);\n                }\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Determine which is the bigger number.\n            if (a = xe - ye) {\n\n                if (xLTy = a < 0) {\n                    a = -a;\n                    t = xc;\n                } else {\n                    ye = xe;\n                    t = yc;\n                }\n\n                t.reverse();\n\n                // Prepend zeros to equalise exponents.\n                for (b = a; b--; t.push(0)) {}\n                t.reverse();\n            } else {\n\n                // Exponents equal. Check digit by digit.\n                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n                for (a = b = 0; b < j; b++) {\n\n                    if (xc[b] != yc[b]) {\n                        xLTy = xc[b] < yc[b];\n                        break;\n                    }\n                }\n            }\n\n            // x < y? Point xc to the array of the bigger number.\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n\n            b = (j = yc.length) - (i = xc.length);\n\n            // Append zeros to xc if shorter.\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n            if (b > 0) for (; b--; xc[i++] = 0) {}\n            b = BASE - 1;\n\n            // Subtract yc from xc.\n            for (; j > a;) {\n\n                if (xc[--j] < yc[j]) {\n                    for (i = j; i && !xc[--i]; xc[i] = b) {}\n                    --xc[i];\n                    xc[j] += BASE;\n                }\n\n                xc[j] -= yc[j];\n            }\n\n            // Remove leading zeros and adjust exponent accordingly.\n            for (; xc[0] == 0; xc.shift(), --ye) {}\n\n            // Zero?\n            if (!xc[0]) {\n\n                // Following IEEE 754 (2008) 6.3,\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\n                y.c = [y.e = 0];\n                return y;\n            }\n\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n            // for finite x and y.\n            return normalise(y, xc, ye);\n        };\n\n        /*\r\n         *   n % 0 =  N\r\n         *   n % N =  N\r\n         *   n % I =  n\r\n         *   0 % n =  0\r\n         *  -0 % n = -0\r\n         *   0 % 0 =  N\r\n         *   0 % N =  N\r\n         *   0 % I =  0\r\n         *   N % n =  N\r\n         *   N % 0 =  N\r\n         *   N % N =  N\r\n         *   N % I =  N\r\n         *   I % n =  N\r\n         *   I % 0 =  N\r\n         *   I % N =  N\r\n         *   I % I =  N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n         */\n        P.modulo = P.mod = function (y, b) {\n            var q,\n                s,\n                x = this;\n\n            id = 11;\n            y = new BigNumber(y, b);\n\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n            if (!x.c || !y.s || y.c && !y.c[0]) {\n                return new BigNumber(NaN);\n\n                // Return x if y is Infinity or x is zero.\n            } else if (!y.c || x.c && !x.c[0]) {\n                return new BigNumber(x);\n            }\n\n            if (MODULO_MODE == 9) {\n\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\n                // r = x - qy    where  0 <= r < abs(y)\n                s = y.s;\n                y.s = 1;\n                q = div(x, y, 0, 3);\n                y.s = s;\n                q.s *= s;\n            } else {\n                q = div(x, y, 0, MODULO_MODE);\n            }\n\n            return x.minus(q.times(y));\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n         * i.e. multiplied by -1.\r\n         */\n        P.negated = P.neg = function () {\n            var x = new BigNumber(this);\n            x.s = -x.s || null;\n            return x;\n        };\n\n        /*\r\n         *  n + 0 = n\r\n         *  n + N = N\r\n         *  n + I = I\r\n         *  0 + n = n\r\n         *  0 + 0 = 0\r\n         *  0 + N = N\r\n         *  0 + I = I\r\n         *  N + n = N\r\n         *  N + 0 = N\r\n         *  N + N = N\r\n         *  N + I = N\r\n         *  I + n = I\r\n         *  I + 0 = I\r\n         *  I + N = N\r\n         *  I + I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n         * BigNumber(y, b).\r\n         */\n        P.plus = P.add = function (y, b) {\n            var t,\n                x = this,\n                a = x.s;\n\n            id = 12;\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.minus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Return ±Infinity if either ±Infinity.\n                if (!xc || !yc) return new BigNumber(a / 0);\n\n                // Either zero?\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n            if (a = xe - ye) {\n                if (a > 0) {\n                    ye = xe;\n                    t = yc;\n                } else {\n                    a = -a;\n                    t = xc;\n                }\n\n                t.reverse();\n                for (; a--; t.push(0)) {}\n                t.reverse();\n            }\n\n            a = xc.length;\n            b = yc.length;\n\n            // Point xc to the longer array, and b to the shorter length.\n            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\n\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n            for (a = 0; b;) {\n                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n            }\n\n            if (a) {\n                xc.unshift(a);\n                ++ye;\n            }\n\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n            // ye = MAX_EXP + 1 possible\n            return normalise(y, xc, ye);\n        };\n\n        /*\r\n         * Return the number of significant digits of the value of this BigNumber.\r\n         *\r\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n         */\n        P.precision = P.sd = function (z) {\n            var n,\n                v,\n                x = this,\n                c = x.c;\n\n            // 'precision() argument not a boolean or binary digit: {z}'\n            if (z != null && z !== !!z && z !== 1 && z !== 0) {\n                if (ERRORS) raise(13, 'argument' + notBool, z);\n                if (z != !!z) z = null;\n            }\n\n            if (!c) return null;\n            v = c.length - 1;\n            n = v * LOG_BASE + 1;\n\n            if (v = c[v]) {\n\n                // Subtract the number of trailing zeros of the last element.\n                for (; v % 10 == 0; v /= 10, n--) {}\n\n                // Add the number of digits of the first element.\n                for (v = c[0]; v >= 10; v /= 10, n++) {}\n            }\n\n            if (z && x.e + 1 > n) n = x.e + 1;\n\n            return n;\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\r\n         * omitted.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'round() decimal places out of range: {dp}'\r\n         * 'round() decimal places not an integer: {dp}'\r\n         * 'round() rounding mode not an integer: {rm}'\r\n         * 'round() rounding mode out of range: {rm}'\r\n         */\n        P.round = function (dp, rm) {\n            var n = new BigNumber(this);\n\n            if (dp == null || isValidInt(dp, 0, MAX, 15)) {\n                round(n, ~~dp + this.e + 1, rm == null || !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);\n            }\n\n            return n;\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n         *\r\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         *\r\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\r\n         * otherwise.\r\n         *\r\n         * 'shift() argument not an integer: {k}'\r\n         * 'shift() argument out of range: {k}'\r\n         */\n        P.shift = function (k) {\n            var n = this;\n            return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument')\n\n            // k < 1e+21, or truncate(k) will produce exponential notation.\n            ? n.times('1e' + truncate(k)) : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER) ? n.s * (k < 0 ? 0 : 1 / 0) : n);\n        };\n\n        /*\r\n         *  sqrt(-n) =  N\r\n         *  sqrt( N) =  N\r\n         *  sqrt(-I) =  N\r\n         *  sqrt( I) =  I\r\n         *  sqrt( 0) =  0\r\n         *  sqrt(-0) = -0\r\n         *\r\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\n        P.squareRoot = P.sqrt = function () {\n            var m,\n                n,\n                r,\n                rep,\n                t,\n                x = this,\n                c = x.c,\n                s = x.s,\n                e = x.e,\n                dp = DECIMAL_PLACES + 4,\n                half = new BigNumber('0.5');\n\n            // Negative/NaN/Infinity/zero?\n            if (s !== 1 || !c || !c[0]) {\n                return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n            }\n\n            // Initial estimate.\n            s = Math.sqrt(+x);\n\n            // Math.sqrt underflow/overflow?\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n            if (s == 0 || s == 1 / 0) {\n                n = coeffToString(c);\n                if ((n.length + e) % 2 == 0) n += '0';\n                s = Math.sqrt(n);\n                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n                if (s == 1 / 0) {\n                    n = '1e' + e;\n                } else {\n                    n = s.toExponential();\n                    n = n.slice(0, n.indexOf('e') + 1) + e;\n                }\n\n                r = new BigNumber(n);\n            } else {\n                r = new BigNumber(s + '');\n            }\n\n            // Check for zero.\n            // r could be zero if MIN_EXP is changed after the this value was created.\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n            // coeffToString to throw.\n            if (r.c[0]) {\n                e = r.e;\n                s = e + dp;\n                if (s < 3) s = 0;\n\n                // Newton-Raphson iteration.\n                for (;;) {\n                    t = r;\n                    r = half.times(t.plus(div(x, t, dp, 1)));\n\n                    if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n\n                        // The exponent of r may here be one less than the final result exponent,\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n                        // are indexed correctly.\n                        if (r.e < e) --s;\n                        n = n.slice(s - 3, s + 1);\n\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n                        // iteration.\n                        if (n == '9999' || !rep && n == '4999') {\n\n                            // On the first iteration only, check to see if rounding up gives the\n                            // exact result as the nines may infinitely repeat.\n                            if (!rep) {\n                                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                                if (t.times(t).eq(x)) {\n                                    r = t;\n                                    break;\n                                }\n                            }\n\n                            dp += 4;\n                            s += 4;\n                            rep = 1;\n                        } else {\n\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                            // result. If not, then there are further digits and m will be truthy.\n                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n                                // Truncate to the first rounding digit.\n                                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                                m = !r.times(r).eq(x);\n                            }\n\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n        };\n\n        /*\r\n         *  n * 0 = 0\r\n         *  n * N = N\r\n         *  n * I = I\r\n         *  0 * n = 0\r\n         *  0 * 0 = 0\r\n         *  0 * N = N\r\n         *  0 * I = N\r\n         *  N * n = N\r\n         *  N * 0 = N\r\n         *  N * N = N\r\n         *  N * I = N\r\n         *  I * n = I\r\n         *  I * 0 = N\r\n         *  I * N = N\r\n         *  I * I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\r\n         * BigNumber(y, b).\r\n         */\n        P.times = P.mul = function (y, b) {\n            var c,\n                e,\n                i,\n                j,\n                k,\n                m,\n                xcL,\n                xlo,\n                xhi,\n                ycL,\n                ylo,\n                yhi,\n                zc,\n                base,\n                sqrtBase,\n                x = this,\n                xc = x.c,\n                yc = (id = 17, y = new BigNumber(y, b)).c;\n\n            // Either NaN, ±Infinity or ±0?\n            if (!xc || !yc || !xc[0] || !yc[0]) {\n\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n                    y.c = y.e = y.s = null;\n                } else {\n                    y.s *= x.s;\n\n                    // Return ±Infinity if either is ±Infinity.\n                    if (!xc || !yc) {\n                        y.c = y.e = null;\n\n                        // Return ±0 if either is ±0.\n                    } else {\n                        y.c = [0];\n                        y.e = 0;\n                    }\n                }\n\n                return y;\n            }\n\n            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n            y.s *= x.s;\n            xcL = xc.length;\n            ycL = yc.length;\n\n            // Ensure xc points to longer array and xcL to its length.\n            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n            // Initialise the result array with zeros.\n            for (i = xcL + ycL, zc = []; i--; zc.push(0)) {}\n\n            base = BASE;\n            sqrtBase = SQRT_BASE;\n\n            for (i = ycL; --i >= 0;) {\n                c = 0;\n                ylo = yc[i] % sqrtBase;\n                yhi = yc[i] / sqrtBase | 0;\n\n                for (k = xcL, j = i + k; j > i;) {\n                    xlo = xc[--k] % sqrtBase;\n                    xhi = xc[k] / sqrtBase | 0;\n                    m = yhi * xlo + xhi * ylo;\n                    xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n                    zc[j--] = xlo % base;\n                }\n\n                zc[j] = c;\n            }\n\n            if (c) {\n                ++e;\n            } else {\n                zc.shift();\n            }\n\n            return normalise(y, zc, e);\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toDigits() precision out of range: {sd}'\r\n         * 'toDigits() precision not an integer: {sd}'\r\n         * 'toDigits() rounding mode not an integer: {rm}'\r\n         * 'toDigits() rounding mode out of range: {rm}'\r\n         */\n        P.toDigits = function (sd, rm) {\n            var n = new BigNumber(this);\n            sd = sd == null || !isValidInt(sd, 1, MAX, 18, 'precision') ? null : sd | 0;\n            rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;\n            return sd ? round(n, sd, rm) : n;\n        };\n\n        /*\r\n         * Return a string representing the value of this BigNumber in exponential notation and\r\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toExponential() decimal places not an integer: {dp}'\r\n         * 'toExponential() decimal places out of range: {dp}'\r\n         * 'toExponential() rounding mode not an integer: {rm}'\r\n         * 'toExponential() rounding mode out of range: {rm}'\r\n         */\n        P.toExponential = function (dp, rm) {\n            return format(this, dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);\n        };\n\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFixed() decimal places not an integer: {dp}'\r\n         * 'toFixed() decimal places out of range: {dp}'\r\n         * 'toFixed() rounding mode not an integer: {rm}'\r\n         * 'toFixed() rounding mode out of range: {rm}'\r\n         */\n        P.toFixed = function (dp, rm) {\n            return format(this, dp != null && isValidInt(dp, 0, MAX, 20) ? ~~dp + this.e + 1 : null, rm, 20);\n        };\n\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n         * of the FORMAT object (see BigNumber.config).\r\n         *\r\n         * FORMAT = {\r\n         *      decimalSeparator : '.',\r\n         *      groupSeparator : ',',\r\n         *      groupSize : 3,\r\n         *      secondaryGroupSize : 0,\r\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n         *      fractionGroupSize : 0\r\n         * };\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFormat() decimal places not an integer: {dp}'\r\n         * 'toFormat() decimal places out of range: {dp}'\r\n         * 'toFormat() rounding mode not an integer: {rm}'\r\n         * 'toFormat() rounding mode out of range: {rm}'\r\n         */\n        P.toFormat = function (dp, rm) {\n            var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21) ? ~~dp + this.e + 1 : null, rm, 21);\n\n            if (this.c) {\n                var i,\n                    arr = str.split('.'),\n                    g1 = +FORMAT.groupSize,\n                    g2 = +FORMAT.secondaryGroupSize,\n                    groupSeparator = FORMAT.groupSeparator,\n                    intPart = arr[0],\n                    fractionPart = arr[1],\n                    isNeg = this.s < 0,\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\n                    len = intDigits.length;\n\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n                if (g1 > 0 && len > 0) {\n                    i = len % g1 || g1;\n                    intPart = intDigits.substr(0, i);\n\n                    for (; i < len; i += g1) {\n                        intPart += groupSeparator + intDigits.substr(i, g1);\n                    }\n\n                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n                    if (isNeg) intPart = '-' + intPart;\n                }\n\n                str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;\n            }\n\n            return str;\n        };\n\n        /*\r\n         * Return a string array representing the value of this BigNumber as a simple fraction with\r\n         * an integer numerator and an integer denominator. The denominator will be a positive\r\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n         * denominator is not specified, the denominator will be the lowest value necessary to\r\n         * represent the number exactly.\r\n         *\r\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\r\n         *\r\n         * 'toFraction() max denominator not an integer: {md}'\r\n         * 'toFraction() max denominator out of range: {md}'\r\n         */\n        P.toFraction = function (md) {\n            var arr,\n                d0,\n                d2,\n                e,\n                exp,\n                n,\n                n0,\n                q,\n                s,\n                k = ERRORS,\n                x = this,\n                xc = x.c,\n                d = new BigNumber(ONE),\n                n1 = d0 = new BigNumber(ONE),\n                d1 = n0 = new BigNumber(ONE);\n\n            if (md != null) {\n                ERRORS = false;\n                n = new BigNumber(md);\n                ERRORS = k;\n\n                if (!(k = n.isInt()) || n.lt(ONE)) {\n\n                    if (ERRORS) {\n                        raise(22, 'max denominator ' + (k ? 'out of range' : 'not an integer'), md);\n                    }\n\n                    // ERRORS is false:\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\n                    md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;\n                }\n            }\n\n            if (!xc) return x.toString();\n            s = coeffToString(xc);\n\n            // Determine initial denominator.\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n            e = d.e = s.length - x.e - 1;\n            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n            md = !md || n.cmp(d) > 0 ? e > 0 ? d : n1 : n;\n\n            exp = MAX_EXP;\n            MAX_EXP = 1 / 0;\n            n = new BigNumber(s);\n\n            // n0 = d1 = 0\n            n0.c[0] = 0;\n\n            for (;;) {\n                q = div(n, d, 0, 1);\n                d2 = d0.plus(q.times(d1));\n                if (d2.cmp(md) == 1) break;\n                d0 = d1;\n                d1 = d2;\n                n1 = n0.plus(q.times(d2 = n1));\n                n0 = d2;\n                d = n.minus(q.times(d2 = d));\n                n = d2;\n            }\n\n            d2 = div(md.minus(d0), d1, 0, 1);\n            n0 = n0.plus(d2.times(n1));\n            d0 = d0.plus(d2.times(d1));\n            n0.s = n1.s = x.s;\n            e *= 2;\n\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\n            arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1.toString(), d1.toString()] : [n0.toString(), d0.toString()];\n\n            MAX_EXP = exp;\n            return arr;\n        };\n\n        /*\r\n         * Return the value of this BigNumber converted to a number primitive.\r\n         */\n        P.toNumber = function () {\n            return +this;\n        };\n\n        /*\r\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\r\n         * If m is present, return the result modulo m.\r\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using\r\n         * ROUNDING_MODE.\r\n         *\r\n         * The modular power operation works efficiently when x, n, and m are positive integers,\r\n         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).\r\n         *\r\n         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         * [m] {number|string|BigNumber} The modulus.\r\n         *\r\n         * 'pow() exponent not an integer: {n}'\r\n         * 'pow() exponent out of range: {n}'\r\n         *\r\n         * Performs 54 loop iterations for n of 9007199254740991.\r\n         */\n        P.toPower = P.pow = function (n, m) {\n            var k,\n                y,\n                z,\n                i = mathfloor(n < 0 ? -n : +n),\n                x = this;\n\n            if (m != null) {\n                id = 23;\n                m = new BigNumber(m);\n            }\n\n            // Pass ±Infinity to Math.pow if exponent is out of range.\n            if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent') && (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) || parseFloat(n) != n && !(n = NaN)) || n == 0) {\n                k = Math.pow(+x, n);\n                return new BigNumber(m ? k % m : k);\n            }\n\n            if (m) {\n                if (n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt()) {\n                    x = x.mod(m);\n                } else {\n                    z = m;\n\n                    // Nullify m so only a single mod operation is performed at the end.\n                    m = null;\n                }\n            } else if (POW_PRECISION) {\n\n                // Truncating each coefficient array to a length of k after each multiplication\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\n                // i.e. there will be a minimum of 28 guard digits retained.\n                // (Using + 1.5 would give [9, 21] guard digits.)\n                k = mathceil(POW_PRECISION / LOG_BASE + 2);\n            }\n\n            y = new BigNumber(ONE);\n\n            for (;;) {\n                if (i % 2) {\n                    y = y.times(x);\n                    if (!y.c) break;\n                    if (k) {\n                        if (y.c.length > k) y.c.length = k;\n                    } else if (m) {\n                        y = y.mod(m);\n                    }\n                }\n\n                i = mathfloor(i / 2);\n                if (!i) break;\n                x = x.times(x);\n                if (k) {\n                    if (x.c && x.c.length > k) x.c.length = k;\n                } else if (m) {\n                    x = x.mod(m);\n                }\n            }\n\n            if (m) return y;\n            if (n < 0) y = ONE.div(y);\n\n            return z ? y.mod(z) : k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;\n        };\n\n        /*\r\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n         * necessary to represent the integer part of the value in fixed-point notation, then use\r\n         * exponential notation.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toPrecision() precision not an integer: {sd}'\r\n         * 'toPrecision() precision out of range: {sd}'\r\n         * 'toPrecision() rounding mode not an integer: {rm}'\r\n         * 'toPrecision() rounding mode out of range: {rm}'\r\n         */\n        P.toPrecision = function (sd, rm) {\n            return format(this, sd != null && isValidInt(sd, 1, MAX, 24, 'precision') ? sd | 0 : null, rm, 24);\n        };\n\n        /*\r\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n         * TO_EXP_NEG, return exponential notation.\r\n         *\r\n         * [b] {number} Integer, 2 to 64 inclusive.\r\n         *\r\n         * 'toString() base not an integer: {b}'\r\n         * 'toString() base out of range: {b}'\r\n         */\n        P.toString = function (b) {\n            var str,\n                n = this,\n                s = n.s,\n                e = n.e;\n\n            // Infinity or NaN?\n            if (e === null) {\n\n                if (s) {\n                    str = 'Infinity';\n                    if (s < 0) str = '-' + str;\n                } else {\n                    str = 'NaN';\n                }\n            } else {\n                str = coeffToString(n.c);\n\n                if (b == null || !isValidInt(b, 2, 64, 25, 'base')) {\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);\n                } else {\n                    str = convertBase(toFixedPoint(str, e), b | 0, 10, s);\n                }\n\n                if (s < 0 && n.c[0]) str = '-' + str;\n            }\n\n            return str;\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\r\n         * number.\r\n         */\n        P.truncated = P.trunc = function () {\n            return round(new BigNumber(this), this.e + 1, 1);\n        };\n\n        /*\r\n         * Return as toString, but do not accept a base argument, and include the minus sign for\r\n         * negative zero.\r\n         */\n        P.valueOf = P.toJSON = function () {\n            var str,\n                n = this,\n                e = n.e;\n\n            if (e === null) return n.toString();\n\n            str = coeffToString(n.c);\n\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);\n\n            return n.s < 0 ? '-' + str : str;\n        };\n\n        P.isBigNumber = true;\n\n        if (config != null) BigNumber.config(config);\n\n        return BigNumber;\n    }\n\n    // PRIVATE HELPER FUNCTIONS\n\n\n    function bitFloor(n) {\n        var i = n | 0;\n        return n > 0 || n === i ? i : i - 1;\n    }\n\n    // Return a coefficient array as a string of base 10 digits.\n    function coeffToString(a) {\n        var s,\n            z,\n            i = 1,\n            j = a.length,\n            r = a[0] + '';\n\n        for (; i < j;) {\n            s = a[i++] + '';\n            z = LOG_BASE - s.length;\n            for (; z--; s = '0' + s) {}\n            r += s;\n        }\n\n        // Determine trailing zeros.\n        for (j = r.length; r.charCodeAt(--j) === 48;) {}\n        return r.slice(0, j + 1 || 1);\n    }\n\n    // Compare the value of BigNumbers x and y.\n    function compare(x, y) {\n        var a,\n            b,\n            xc = x.c,\n            yc = y.c,\n            i = x.s,\n            j = y.s,\n            k = x.e,\n            l = y.e;\n\n        // Either NaN?\n        if (!i || !j) return null;\n\n        a = xc && !xc[0];\n        b = yc && !yc[0];\n\n        // Either zero?\n        if (a || b) return a ? b ? 0 : -j : i;\n\n        // Signs differ?\n        if (i != j) return i;\n\n        a = i < 0;\n        b = k == l;\n\n        // Either Infinity?\n        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n        // Compare exponents.\n        if (!b) return k > l ^ a ? 1 : -1;\n\n        j = (k = xc.length) < (l = yc.length) ? k : l;\n\n        // Compare digit by digit.\n        for (i = 0; i < j; i++) {\n            if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n        } // Compare lengths.\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n\n    /*\r\n     * Return true if n is a valid number in range, otherwise false.\r\n     * Use for argument validation when ERRORS is false.\r\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\r\n     */\n    function intValidatorNoErrors(n, min, max) {\n        return (n = truncate(n)) >= min && n <= max;\n    }\n\n    function isArray(obj) {\n        return Object.prototype.toString.call(obj) == '[object Array]';\n    }\n\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\r\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n     */\n    function toBaseOut(str, baseIn, baseOut) {\n        var j,\n            arr = [0],\n            arrL,\n            i = 0,\n            len = str.length;\n\n        for (; i < len;) {\n            for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) {}\n            arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));\n\n            for (; j < arr.length; j++) {\n\n                if (arr[j] > baseOut - 1) {\n                    if (arr[j + 1] == null) arr[j + 1] = 0;\n                    arr[j + 1] += arr[j] / baseOut | 0;\n                    arr[j] %= baseOut;\n                }\n            }\n        }\n\n        return arr.reverse();\n    }\n\n    function toExponential(str, e) {\n        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n    }\n\n    function toFixedPoint(str, e) {\n        var len, z;\n\n        // Negative exponent?\n        if (e < 0) {\n\n            // Prepend zeros.\n            for (z = '0.'; ++e; z += '0') {}\n            str = z + str;\n\n            // Positive exponent\n        } else {\n            len = str.length;\n\n            // Append zeros.\n            if (++e > len) {\n                for (z = '0', e -= len; --e; z += '0') {}\n                str += z;\n            } else if (e < len) {\n                str = str.slice(0, e) + '.' + str.slice(e);\n            }\n        }\n\n        return str;\n    }\n\n    function truncate(n) {\n        n = parseFloat(n);\n        return n < 0 ? mathceil(n) : mathfloor(n);\n    }\n\n    // EXPORT\n\n\n    BigNumber = constructorFactory();\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber;\n\n    // AMD.\n    if (typeof define == 'function' && define.amd) {\n        define(function () {\n            return BigNumber;\n        });\n\n        // Node.js and other environments that support module.exports.\n    } else if (typeof module != 'undefined' && module.exports) {\n        module.exports = BigNumber;\n\n        // Browser.\n    } else {\n        if (!globalObj) globalObj = typeof self != 'undefined' ? self : Function('return this')();\n        globalObj.BigNumber = BigNumber;\n    }\n})(undefined);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./third-party/bignumber.js\n// module id = 1\n// module chunks = 0","'use strict';\n\n/**\n * Copyright (c) 2017 Copyright brainpoint All Rights Reserved.\n * Author: lipengxiang\n * Desc:\n */\n\nvar PromiseLib = Promise;\n\n/**\n* @desc: 判断是否是有效时间.\n*/\nexports.isValidate = function (date /*:Date*/) /*:boolean*/{\n  if (isNaN(date) || !date || date.toString() == 'Invalid Date') return false;\n  return date instanceof Date;\n};\n\n/**\n * @desc: 获取时间的string.\n * @param time: ms.\n * @param fmt: 格式化, 默认为 'HH:mm:ss'\n *             年(y)、月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q)\n *              'yyyy-MM-dd hh:mm:ss.S' ==> 2006-07-02 08:09:04.423\n *              'yyyy-MM-dd E HH:mm:ss' ==> 2009-03-10 星期二 20:09:04\n *              'yyyy-M-d h:m:s.S'      ==> 2006-7-2 8:9:4.18\n * @param weekFmt: 星期的文字格式, 默认为 {'0':'星期天', '1': '星期一', ..., '6':'星期六'}\n * @return: string.\n */\nfunction getTimeString(time, fmt, weekFmt) {\n  if (typeof time !== \"number\") return \"\";\n\n  fmt = fmt || 'HH:mm:ss';\n\n  var t = new Date(time);\n  var o = {\n    \"M+\": t.getMonth() + 1, //月份         \n    \"d+\": t.getDate(), //日         \n    \"h+\": t.getHours() % 12 == 0 ? 12 : t.getHours() % 12, //小时         \n    \"H+\": t.getHours(), //小时         \n    \"m+\": t.getMinutes(), //分         \n    \"s+\": t.getSeconds(), //秒         \n    \"q+\": Math.floor((t.getMonth() + 3) / 3), //季度         \n    \"S\": t.getMilliseconds() //毫秒         \n  };\n  var week = weekFmt || {\n    \"0\": \"星期天\",\n    \"1\": \"星期一\",\n    \"2\": \"星期二\",\n    \"3\": \"星期三\",\n    \"4\": \"星期四\",\n    \"5\": \"星期五\",\n    \"6\": \"星期六\"\n  };\n  if (/(y+)/.test(fmt)) {\n    fmt = fmt.replace(RegExp.$1, (t.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n  }\n  if (/(E+)/.test(fmt)) {\n    fmt = fmt.replace(RegExp.$1, week[t.getDay() + \"\"]);\n  }\n  for (var k in o) {\n    if (new RegExp(\"(\" + k + \")\").test(fmt)) {\n      fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\n    }\n  }\n  return fmt;\n};\nexports.getTimeString = getTimeString;\n\n/**\n * @desc: 获取指定时间距离现在的时间描述.\n *        例如, 昨天, 1小时前等.\n * @param time: ms. 小于当前时间, 大于当前时间将显示为 '刚刚';\n * @param strFmt: 需要显示的文字. \n *                默认为 {\n *                        now:    '刚刚',           // 3秒钟以内将显示此信息.\n *                        second: '秒前',\n *                        minute: '分钟前',\n *                        hour:   '小时前',\n *                        day_yesterday: '昨天',\n *                        day:    '天前',\n *                        month:  '个月前',          // 6个月内将显示此信息.\n *                        time:   'yyyy-M-d h:m:s'  // 超过6个月将使用此格式格式化时间\n *                       }\n * @return: string.\n */\nexports.getTimeStringFromNow = function (time, strFmt) {\n  strFmt = strFmt || {};\n  strFmt.now = strFmt.now || '刚刚';\n  strFmt.second = strFmt.second || '秒前';\n  strFmt.minute = strFmt.minute || '分钟前';\n  strFmt.hour = strFmt.hour || '小时前';\n  strFmt.day_yesterday = strFmt.day_yesterday || '昨天';\n  strFmt.day = strFmt.day || '天前';\n  strFmt.month = strFmt.month || '个月前';\n  strFmt.time = strFmt.time || 'yyyy-M-d h:m:s';\n\n  var now = Math.ceil(Date.now() / 1000);\n  time = Math.ceil(time / 1000);\n\n  if (now > time) {\n    var s = now - time;\n    if (s < 3) {\n      return strFmt.now;\n    }\n\n    if (s < 60) {\n      return s.toString() + strFmt.second;\n    }\n\n    if (s < 60 * 60) {\n      return Math.ceil(s / 60).toString() + strFmt.minute;\n    }\n\n    if (s < 60 * 60 * 24) {\n      return Math.ceil(s / 60 / 60).toString() + strFmt.hour;\n    }\n\n    if (s < 60 * 60 * 24 * 30) {\n      var dNow = new Date(now * 1000);\n\n      dNow.setHours(0, 0, 1);\n      if (dNow.getTime() - time <= 60 * 60 * 24) {\n        return strFmt.day_yesterday;\n      }\n\n      return Math.ceil(s / 60 / 60 / 24).toString() + strFmt.day;\n    }\n\n    if (s < 60 * 60 * 24 * 30 * 6) {\n      return Math.ceil(s / 60 / 60 / 24 / 30).toString() + strFmt.month;\n    }\n\n    return getTimeString(time, strFmt.time);\n  }\n\n  return strFmt.now;\n};\n\n/**\n * @desc: 通过字符串获取date. getTime('2012-05-09 11:10:12')\n * @param strTime: 时间字符串. '2012-05-09 11:10:12' \n * @return: Date.\n */\nexports.getTime = function (strTime) {\n  var date = new Date();\n  date.setFullYear(parseInt(strTime.substr(0, 4)), parseInt(strTime.substr(5, 2), 10) - 1, parseInt(strTime.substr(8, 2)));\n  date.setHours(parseInt(strTime.substr(11, 2)) || 0, parseInt(strTime.substr(14, 2)) || 0, parseInt(strTime.substr(17, 2)) || 0, 0);\n  return date;\n};\n\n/**\n * @desc: 通过时间获取date. getTime2('20120509111012')\n * @param strTime: 时间字符串. '20120509111012' \n * @return: Date.\n */\nexports.getTime2 = function (strTime) {\n  var date = new Date();\n\n  date.setFullYear(parseInt(strTime.substr(0, 4)), parseInt(strTime.substr(4, 2), 10) - 1, parseInt(strTime.substr(6, 2)));\n  date.setHours(parseInt(strTime.substr(8, 2)) || 0, parseInt(strTime.substr(10, 2)) || 0, parseInt(strTime.substr(12, 2)) || 0, 0);\n\n  return date;\n};\n\n/**\n * @desc: getDate('2012-05-09')\n * @return: Date.\n */\nexports.getDate = function (strDate) {\n  var date = new Date(parseInt(strDate.substr(0, 4)), parseInt(strDate.substr(5, 2), 10) - 1, parseInt(strDate.substr(8, 2)));\n  return date;\n};\n\n/**\n * @desc: getDate2('20120509')\n * @return: Date.\n */\nexports.getDate2 = function (strDate) {\n  var date = new Date(parseInt(strDate.substr(0, 4)), parseInt(strDate.substr(4, 2), 10) - 1, parseInt(strDate.substr(6, 2)));\n  return date;\n};\n\n/**\n * @desc: 获取时间的协调世界时间 string.\n * @param time: ms. (本地时间)\n * @param fmt: 格式化, 默认为 'HH:mm:ss'\n *             年(y)、月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q)\n *              'yyyy-MM-dd hh:mm:ss.S' ==> 2006-07-02 08:09:04.423\n *              'yyyy-MM-dd E HH:mm:ss' ==> 2009-03-10 星期二 20:09:04\n *              'yyyy-M-d h:m:s.S'      ==> 2006-7-2 8:9:4.18\n * @param weekFmt: 星期的文字格式, 默认为 {'0':'星期天', '1': '星期一', ..., '6':'星期六'}\n * @return: string.\n */\nexports.getUTCTimeString = function (time, fmt, weekFmt) {\n  if (typeof time !== \"number\") return \"\";\n\n  fmt = fmt || 'HH:mm:ss';\n\n  var t = new Date(time);\n  var o = {\n    \"M+\": t.getUTCMonth() + 1, //月份         \n    \"d+\": t.getUTCDate(), //日         \n    \"h+\": t.getUTCHours() % 12 == 0 ? 12 : t.getUTCHours() % 12, //小时         \n    \"H+\": t.getUTCHours(), //小时         \n    \"m+\": t.getUTCMinutes(), //分         \n    \"s+\": t.getUTCSeconds(), //秒         \n    \"q+\": Math.floor((t.getUTCMonth() + 3) / 3), //季度         \n    \"S\": t.getUTCMilliseconds() //毫秒         \n  };\n  var week = weekFmt || {\n    \"0\": \"星期天\",\n    \"1\": \"星期一\",\n    \"2\": \"星期二\",\n    \"3\": \"星期三\",\n    \"4\": \"星期四\",\n    \"5\": \"星期五\",\n    \"6\": \"星期六\"\n  };\n  if (/(y+)/.test(fmt)) {\n    fmt = fmt.replace(RegExp.$1, (t.getUTCFullYear() + \"\").substr(4 - RegExp.$1.length));\n  }\n  if (/(E+)/.test(fmt)) {\n    fmt = fmt.replace(RegExp.$1, week[t.getUTCDay() + \"\"]);\n  }\n  for (var k in o) {\n    if (new RegExp(\"(\" + k + \")\").test(fmt)) {\n      fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\n    }\n  }\n  return fmt;\n};\n\n/**\n * @desc: 通过世界时间获取date. getDateFromUTC('2012-05-09')\n * @param strDateUTC: 世界日期字符串. '2012-05-09' \n * @return: Date.\n */\nexports.getDateFromUTC = function (strDateUTC) {\n  var date = new Date();\n  date.setUTCFullYear(parseInt(strDateUTC.substr(0, 4)), parseInt(strDateUTC.substr(5, 2), 10) - 1, parseInt(strDateUTC.substr(8, 2)));\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n};\n\n/**\n * @desc: 通过世界时间获取date. getDate2FromUTC('20120509')\n * @param strDateUTC: 世界日期字符串. '20120509' \n * @return: Date.\n */\nexports.getDate2FromUTC = function (strDateUTC) {\n  var date = new Date();\n\n  date.setUTCFullYear(parseInt(strDateUTC.substr(0, 4)), parseInt(strDateUTC.substr(4, 2), 10) - 1, parseInt(strDateUTC.substr(6, 2)));\n  date.setUTCHours(0, 0, 0, 0);\n\n  return date;\n};\n\n/**\n * @desc: 通过世界时间获取date. getTimeFromUTC('2012-05-09 11:10:12')\n * @param strTimeUTC: 世界时间字符串. '2012-05-09 11:10:12' \n * @return: Date.\n */\nexports.getTimeFromUTC = function (strTimeUTC) {\n  var date = new Date();\n  date.setUTCFullYear(parseInt(strTimeUTC.substr(0, 4)), parseInt(strTimeUTC.substr(5, 2), 10) - 1, parseInt(strTimeUTC.substr(8, 2)));\n  date.setUTCHours(parseInt(strTimeUTC.substr(11, 2)) || 0, parseInt(strTimeUTC.substr(14, 2)) || 0, parseInt(strTimeUTC.substr(17, 2)) || 0, 0);\n  return date;\n};\n\n/**\n * @desc: 通过世界时间获取date. getTime2FromUTC('20120509111012')\n * @param strTimeUTC: 世界日期字符串. '20120509111012' \n * @return: Date.\n */\nexports.getTime2FromUTC = function (strTimeUTC) {\n  var date = new Date();\n\n  date.setUTCFullYear(parseInt(strTimeUTC.substr(0, 4)), parseInt(strTimeUTC.substr(4, 2), 10) - 1, parseInt(strTimeUTC.substr(6, 2)));\n  date.setUTCHours(parseInt(strTimeUTC.substr(8, 2)) || 0, parseInt(strTimeUTC.substr(10, 2)) || 0, parseInt(strTimeUTC.substr(12, 2)) || 0, 0);\n\n  return date;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./common/date.js\n// module id = 2\n// module chunks = 0","'use strict';\n\n/**\n * Copyright (c) 2017 Copyright brainpoint All Rights Reserved.\n * Author: lipengxiang\n * Desc:\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nmodule.exports = function (_Error) {\n  _inherits(_class, _Error);\n\n  /**\n  * @desc: 构造异常对象.\n  * @param msg: 异常消息\n  * @param code: 异常代码\n  * @param filename: 异常文件名\n  * @param line: 异常文件所在行\n  * @param column: 异常文件所在列\n  * @return: \n  */\n  function _class(msg, code, filename, line, column) {\n    _classCallCheck(this, _class);\n\n    var _this = _possibleConstructorReturn(this, _Error.call(this, code + \" \" + msg));\n\n    _this.code = code;\n    _this.msg = msg;\n    _this.filename = filename;\n    _this.line = line;\n    _this.column = column || 0;\n    return _this;\n  }\n\n  /**\n  * @desc: 一般错误.\n  */\n\n  _createClass(_class, null, [{\n    key: \"ERROR\",\n    get: function get() {\n      return \"error\";\n    }\n\n    /**\n    * @desc: 参数错误.\n    */\n\n  }, {\n    key: \"PARAM\",\n    get: function get() {\n      return \"param error\";\n    }\n\n    /**\n    * @desc: 越界\n    * @return:\n    */\n\n  }, {\n    key: \"OUT_OF_RANGE\",\n    get: function get() {\n      return \"out of range\";\n    }\n  }]);\n\n  return _class;\n}(Error);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./common/exception.js\n// module id = 3\n// module chunks = 0","'use strict';\n\n(function () {\n  if (typeof Promise.prototype['finally'] === 'function') {\n    return;\n  }\n  Promise.prototype['finally'] = function (fn) {\n    return this.then(function (value) {\n      return this.constructor.resolve(fn()).then(function () {\n        return value;\n      });\n    })['catch'](function (reason) {\n      return this.constructor.resolve(fn()).then(function () {\n        throw reason;\n      });\n    });\n  };\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./common/promise-finally-polyfill.js\n// module id = 4\n// module chunks = 0","'use strict';\n\n/**\n * Copyright (c) 2017 Copyright brainpoint All Rights Reserved.\n * Author: lipengxiang\n * Desc:\n */\n\nvar _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n};\n\nvar BigNumber = require('../third-party/bignumber.js');\n\n/**\n * @desc: 进行bigint转换.\n */\nexports.bigint = function (v) {\n  if (exports.bigint_check(v)) {\n    if (typeof v === 'string') {\n      if (v.length >= 15) // 对千亿以上的数值使用bignumber.\n        return new BigNumber(v);\n      return Number(v);\n    } else {\n      return v;\n    }\n  } else {\n    return Number.NaN;\n  }\n};\n\n/**\n * @desc: 判断是否是bigint.\n */\nexports.bigint_check = function (v) {\n  if (Number.isInteger(v)) return true;\n  if (!v) return false;\n\n  var typev = typeof v === 'undefined' ? 'undefined' : _typeof(v);\n  if (typev === 'string') {\n    if (v.length > 22 || v.length < 1) return false;\n\n    for (var j = 1; j < v.length; j++) {\n      if (v[j] < '0' || v[j] > '9') return false;\n    }\n\n    if (v.length == 1) {\n      if (v[0] < '0' || v[0] > '9') return false;else return true;\n    }\n\n    if (v[0] == '-') {\n      if (v.length < 2 || v[1] < '1' || v[1] > '9') return false;\n    } else {\n      if (v[0] < '1' || v[0] > '9') return false;\n    }\n\n    return true;\n  } else if (typev === 'object') {\n    return !!v.isBigNumber;\n  } else {\n    return false;\n  }\n};\n\n/**\n* @desc: calc bigint\n* @return: bigint.\n*/\nexports.bigint_add = function (a, b) {\n  if (!(a instanceof BigNumber)) a = new BigNumber(a);return a.plus(b);\n};\n\nexports.bigint_minus = function (a, b) {\n  if (!(a instanceof BigNumber)) a = new BigNumber(a);return a.minus(b);\n};\n\nexports.bigint_dividedBy = function (a, b) {\n  if (!(a instanceof BigNumber)) a = new BigNumber(a);return a.dividedBy(b);\n};\n\nexports.bigint_mul = function (a, b) {\n  if (!(a instanceof BigNumber)) a = new BigNumber(a);return a.times(b);\n};\n\n/**\n* @desc: compare with bigint.\n* @return: boolean.\n*/\nexports.bigint_equal = function (a, b) {\n  if (!(a instanceof BigNumber)) a = new BigNumber(a);return a.equals(b);\n};\n\nexports.bigint_more_than = function (a, b) {\n  if (!(a instanceof BigNumber)) a = new BigNumber(a);return a.greaterThan(b);\n};\n\nexports.bigint_more_than_e = function (a, b) {\n  if (!(a instanceof BigNumber)) a = new BigNumber(a);return a.greaterThanOrEqualTo(b);\n};\n\nexports.bigint_less_than = function (a, b) {\n  if (!(a instanceof BigNumber)) a = new BigNumber(a);return a.lessThan(b);\n};\n\nexports.bigint_less_than_e = function (a, b) {\n  if (!(a instanceof BigNumber)) a = new BigNumber(a);return a.lessThanOrEqualTo(b);\n};\n\nexports.bigint_mod = function (a, b) {\n  if (Number.isInteger(a)) {\n    if (Number.isInteger(b)) return a % b;else {\n      return new BigNumber(a).mod(b);\n    }\n  }\n\n  if (!(a instanceof BigNumber)) a = new BigNumber(a);\n  return a.mod(b);\n};\n\n/**\n* @desc: 转换bigint->string.\n* @param fixed: 小数位个数, 默认为0.\n* @return: string.\n*/\nexports.bigint_toFixed = function (a, fixed) {\n  fixed = fixed || 0;if (!(a instanceof BigNumber)) a = new BigNumber(a);return a.toFixed(fixed);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./common/utils.bigint.js\n// module id = 5\n// module chunks = 0","\"use strict\";\n\n/**\n * Copyright (c) 2017 Copyright brainpoint All Rights Reserved.\n * Author: lipengxiang\n * Desc:\n *  crc32(str, crc=null);\n *  crc32_file(file, function(crc32Value) {})\n */\n\nvar crypt = require('../common/crypt');\n\n/**\n * @desc: 计算字符串的crc32值\n * @param crc: 可以在这个值得基础上继续计算\n * @return: number.\n */\nfunction crc32( /* String */str, /* Number */crc) {\n    if (!crc) crc = 0;\n    crc = crc ^ -1;\n\n    for (var i = 0, iTop = str.length; i < iTop; i++) {\n        crc = crc >>> 8 ^ crypt.crc32_table[(crc ^ str.charCodeAt(i)) & 0xFF];\n    }\n    return crc ^ -1;\n}\nexports.crc32 = crc32;\n\n/**\n * @desc:\n * @param cb: cb(crc32)\n * @return:\n */\nfunction crc32_fileSegment(file, offset, length, cb) {\n    if (!file || !cb) {\n        if (cb) cb(0);\n        return;\n    }\n\n    if (offset >= file.size || offset < 0 || length == 0) {\n        if (cb) cb(0);\n        return;\n    }\n\n    if (length < 0) {\n        length = file.size;\n    }\n\n    var blobSlice = File.prototype.mozSlice || File.prototype.webkitSlice || File.prototype.slice;\n    var fileReader = new FileReader();\n\n    if (file.size - offset < length) {\n        length = file.size - offset;\n    }\n\n    var chunkSize = 1024 * 1024 * 2;\n    var chunks = Math.ceil(length / chunkSize);\n    var currentChunk = 0;\n\n    var loadNext = function loadNext() {\n        var start = currentChunk * chunkSize + offset,\n            end = start + chunkSize >= length + offset ? length + offset : start + chunkSize;\n        fileReader.readAsBinaryString(blobSlice.call(file, start, end));\n    };\n\n    var crc = 0;\n\n    //每块文件读取完毕之后的处理.\n    fileReader.onload = function (e) {\n        crc = crc32(e.target.result, crc);\n        // append binary string\n        currentChunk++;\n\n        if (currentChunk < chunks) {\n            loadNext();\n        } else {\n            cb(crc);\n        }\n    };\n\n    loadNext();\n}\nexports.crc32_fileSegment = crc32_fileSegment;\n\n/**\n * @desc:\n * @param cb: cb(crc32)\n * @return:\n */\nexports.crc32_file = function (file, cb) {\n    crc32_fileSegment(file, 0, file.size, cb);\n};\n\n/**\n* @desc: base64编码.\n* @param arrByte: 字节数组.\n* @return: string.\n*/\nexports.base64_encode = crypt.base64_encode;\n\n/**\n* @desc: base64解码.\n* @return: 字节数组.\n*/\nexports.base64_decode = function (strBase64) {\n    var c1, c2, c3, c4;\n    var base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);\n    var i = 0,\n        len = strBase64.length,\n        out = [];\n\n    while (i < len) {\n        do {\n            c1 = base64DecodeChars[strBase64.charCodeAt(i++) & 0xff];\n        } while (i < len && c1 == -1);\n\n        if (c1 == -1) break;\n\n        do {\n            c2 = base64DecodeChars[strBase64.charCodeAt(i++) & 0xff];\n        } while (i < len && c2 == -1);\n\n        if (c2 == -1) break;\n\n        out.push(c1 << 2 | (c2 & 0x30) >> 4);\n\n        do {\n            c3 = strBase64.charCodeAt(i++) & 0xff;\n            if (c3 == 61) return out;\n\n            c3 = base64DecodeChars[c3];\n        } while (i < len && c3 == -1);\n\n        if (c3 == -1) break;\n\n        out.push((c2 & 0XF) << 4 | (c3 & 0x3C) >> 2);\n\n        do {\n            c4 = strBase64.charCodeAt(i++) & 0xff;\n            if (c4 == 61) return out;\n            c4 = base64DecodeChars[c4];\n        } while (i < len && c4 == -1);\n\n        if (c4 == -1) break;\n\n        out.push((c3 & 0x03) << 6 | c4);\n    }\n    return out;\n};\n\n/**\n* @desc: 生成一个uuid (v4 random).\n* @return: \n*/\nexports.uuid = function () {\n    var s = [];\n    var hexDigits = \"0123456789abcdef\";\n    for (var i = 0; i < 36; i++) {\n        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n    }\n    s[14] = \"4\"; // bits 12-15 of the time_hi_and_version field to 0010\n    s[19] = hexDigits.substr(s[19] & 0x3 | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01\n    s[8] = s[13] = s[18] = s[23] = \"-\";\n\n    var uuid = s.join(\"\");\n    return uuid;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./libs/crypt.js\n// module id = 6\n// module chunks = 0","'use strict';\n\n/**\n * Copyright (c) 2017 Copyright brainpoint All Rights Reserved.\n * Author: lipengxiang\n * Desc:\n */\n\nvar stringUtils = require('../common/string');\n\nfunction binl2rstr(input) {\n  var i,\n      l = input.length * 32,\n      output = '';\n  for (i = 0; i < l; i += 8) {\n    output += String.fromCharCode(input[i >> 5] >>> i % 32 & 0xFF);\n  }\n  return output;\n}\n\nfunction bit_rol(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n\nfunction rstr2binl(input) {\n  var i,\n      l = input.length * 8,\n      output = Array(input.length >> 2),\n      lo = output.length;\n  for (i = 0; i < lo; i += 1) {\n    output[i] = 0;\n  }\n  for (i = 0; i < l; i += 8) {\n    output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << i % 32;\n  }\n  return output;\n}\n\nfunction safe_add(x, y) {\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n      msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xFFFF;\n}\n\nfunction hex(s) {\n  var input = binl2rstr(binl(rstr2binl(s), s.length * 8));\n  var hex_tab = '0123456789abcdef',\n      output = '',\n      x,\n      i = 0,\n      l = input.length;\n  for (; i < l; i += 1) {\n    x = input.charCodeAt(i);\n    output += hex_tab.charAt(x >>> 4 & 0x0f) + hex_tab.charAt(x & 0x0f);\n  }\n  return output;\n}\n\n/**\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\nfunction binl(x, len) {\n  var i,\n      olda,\n      oldb,\n      oldc,\n      oldd,\n      a = 1732584193,\n      b = -271733879,\n      c = -1732584194,\n      d = 271733878;\n\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[(len + 64 >>> 9 << 4) + 14] = len;\n\n  for (i = 0; i < x.length; i += 16) {\n    olda = a;\n    oldb = b;\n    oldc = c;\n    oldd = d;\n\n    a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n    d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n\n    a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n    a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n\n    a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n    c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n\n    a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n    d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n  }\n  return Array(a, b, c, d);\n}\n\n/**\n * These functions implement the four basic operations the algorithm uses.\n */\n\nfunction md5_cmn(q, a, b, x, s, t) {\n  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n}\n\nfunction md5_ff(a, b, c, d, x, s, t) {\n  return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5_gg(a, b, c, d, x, s, t) {\n  return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5_hh(a, b, c, d, x, s, t) {\n  return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5_ii(a, b, c, d, x, s, t) {\n  return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexports.md5 = function (str) {\n  return hex(stringUtils.utf8Encode(str));\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./libs/crypt.md5.js\n// module id = 7\n// module chunks = 0","'use strict';\n\n/**\n * Copyright (c) 2017 Copyright brainpoint All Rights Reserved.\n * Author: lipengxiang\n * Desc:\n */\n\nvar stringUtils = require('../common/string');\n\nfunction binb2rstr(input) {\n  var i,\n      l = input.length * 32,\n      output = '';\n  for (i = 0; i < l; i += 8) {\n    output += String.fromCharCode(input[i >> 5] >>> 24 - i % 32 & 0xff);\n  }\n  return output;\n}\n\nfunction bit_rol(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n\nfunction safe_add(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff),\n      msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n\nfunction sha1_ft(t, b, c, d) {\n  if (t < 20) {\n    return b & c | ~b & d;\n  }\n  if (t < 40) {\n    return b ^ c ^ d;\n  }\n  if (t < 60) {\n    return b & c | b & d | c & d;\n  }\n  return b ^ c ^ d;\n}\n\nfunction sha1_kt(t) {\n  return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n}\n\nfunction rstr2binb(input) {\n  var i,\n      l = input.length * 8,\n      output = Array(input.length >> 2),\n      lo = output.length;\n  for (i = 0; i < lo; i += 1) {\n    output[i] = 0;\n  }\n  for (i = 0; i < l; i += 8) {\n    output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << 24 - i % 32;\n  }\n  return output;\n}\n\nfunction hex(s) {\n  var input = binb2rstr(binb(rstr2binb(s), s.length * 8));\n  var hex_tab = '0123456789abcdef',\n      output = '',\n      x,\n      i = 0,\n      l = input.length;\n  for (; i < l; i += 1) {\n    x = input.charCodeAt(i);\n    output += hex_tab.charAt(x >>> 4 & 0x0f) + hex_tab.charAt(x & 0x0f);\n  }\n  return output;\n}\n\nfunction binb(x, len) {\n  var i,\n      j,\n      t,\n      olda,\n      oldb,\n      oldc,\n      oldd,\n      olde,\n      w = Array(80),\n      a = 1732584193,\n      b = -271733879,\n      c = -1732584194,\n      d = 271733878,\n      e = -1009589776;\n\n  /* append padding */\n  x[len >> 5] |= 0x80 << 24 - len % 32;\n  x[(len + 64 >> 9 << 4) + 15] = len;\n\n  for (i = 0; i < x.length; i += 16) {\n    olda = a;\n    oldb = b;\n    oldc = c;\n    oldd = d;\n    olde = e;\n\n    for (j = 0; j < 80; j += 1) {\n      if (j < 16) {\n        w[j] = x[i + j];\n      } else {\n        w[j] = bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      }\n      t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = bit_rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n  return Array(a, b, c, d, e);\n}\n\nexports.sha1 = function (str) {\n  return hex(stringUtils.utf8Encode(str));\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./libs/crypt.sha1.js\n// module id = 8\n// module chunks = 0","'use strict';\n\n/**\n* Copyright (c) 2017 Copyright tj All Rights Reserved.\n* Author: lipengxiang\n* Date: 2018-06-02 17:39\n* Desc: \n*/\n\nvar date = require('../common/date');\n\nexports.isValidate = date.isValidate;\nexports.getDate = date.getDate;\nexports.getDate2 = date.getDate2;\nexports.getDate2FromUTC = date.getDate2FromUTC;\nexports.getDateFromUTC = date.getDateFromUTC;\nexports.getTime2FromUTC = date.getTime2FromUTC;\nexports.getTimeString = date.getTimeString;\nexports.getUTCTimeString = date.getUTCTimeString;\nexports.getTimeStringFromNow = date.getTimeStringFromNow;\nexports.getTimeFromUTC = date.getTimeFromUTC;\nexports.getTime = date.getTime;\nexports.getTime2 = date.getTime2;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./libs/date.js\n// module id = 9\n// module chunks = 0","'use strict';\n\n/**\n * Copyright (c) 2017 Copyright brainpoint All Rights Reserved.\n * Author: lipengxiang\n * Desc:\n */\n\nvar string = require('../common/string');\n\n/**\n* @desc: 判断是否是手机号码.\n* @return: boolean.\n*/\nexports.isPhoneMobile = string.isPhoneMobile;\n\n/**\n * @desc: 是否为空串.\n * @return: boolean.\n */\nexports.isEmpty = string.isEmpty;\n\n/**\n * @desc: 判断是否是email.\n * @return: boolean.\n */\nexports.isEmail = string.isEmail;\n\n/**\n * @desc: 判断是否是英文数字组合.\n * @return: boolean.\n */\nexports.isAlphaOrDigit = string.isAlphaOrDigit;\n\n/**\n * @desc: 判断是否是中文.\n * @return: boolean.\n */\nexports.isChinese = string.isChinese;\n\n/**\n * @desc: 获得字符串utf8编码后的字节长度.\n * @return: u32.\n */\nexports.getByteSize = string.getByteSize;\n\n/**\n * @desc: 替换字符串中所有的strSrc->strDest.\n * @return: string.\n */\nexports.replace = string.replace;\n\nexports.utf8ToBytes = string.utf8ToBytes;\nexports.bytesToUtf8 = string.bytesToUtf8;\n\nexports.utf8Encode = string.utf8Encode;\nexports.utf8Decode = string.utf8Decode;\n\nexports.trim = string.trim;\n\n/**\n* @desc: 对字符串中的 <> 标签进行转义为 &lt;, &gt;\n* @return: string.\n*/\nexports.escapeHtml = string.escapeHtml;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./libs/string.js\n// module id = 10\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 11\n// module chunks = 0","/**\n * Copyright (c) 2017 Copyright brainpoint All Rights Reserved.\n * Author: lipengxiang\n * Desc:\n */\n\n\nclass FetchResponse {\n  constructor(data, headers, status) {\n    this.data = data;\n    this.headers = headers;\n    this.status = status;\n  }\n  get statusText() { return this.status.toString(); }\n  blob() {\n    return new Promise((resolve, reject)=>{\n      reject(new Error('unsupport fetch.blob'));\n    });\n  }\n\n  json() {\n    return new Promise((resolve, reject)=>{\n      try {\n        let data = JSON.parse(this.data);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n      resolve(data);\n    });\n  }\n\n  text() {\n    return new Promise((resolve, reject)=>{\n      resolve(this.data);\n    });\n  }\n}\n\nexport function fetch(url, option/*: {\n    method?: string, // 请求方法 get, post, delete 等.\n    mode?: string | 'no-cors' | 'cors' | 'same-origin',   // 'no-cors', 'same-origin'等; (可忽略)\n    headers?: any, // 请求header, 例如:\n    // {\n    //   \"Content-Type\": \"application/json\",\n    //   \"Accept\": 'application/json',\n    // }\n    body?: string,    // 请求内容.\n    timeout?: number, // 超时 (ms), 默认为5000,\n    credentials?: 'include' | null | undefined,  // 携带了credentials='include'则服务器需设置Access-Control-Allow-Credentials\n  }*/) /*: Promise<any>*/ {\n  \n  option = option||{};\n\n  return new Promise((resolve, reject)=>{\n    wx.request({\n      url,\n      header: option.headers,\n      timeout: option.timeout,\n      data: option.body,\n      method: option.method?option.method.toUpperCase():undefined,\n      success: (res)=>{\n        resolve( new FetchResponse(res.data, res.header, res.status) );\n      }\n    })\n  });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./wxmini/libs/fetch.js\n// module id = 12\n// module chunks = 0","'use strict';\n\n/**\n * Copyright (c) 2017 Copyright brainpoint All Rights Reserved.\n * Author: lipengxiang\n * Desc:\n */\n\nvar utils = require('../../common/utils');\n\n/**\n * @desc: 模拟sleep.\n * @return: Promise.\n *     在ms时间后执行.\n * @e.g.\n *     febs.utils.sleep(1000).then(()=>{\n          //1000ms之后resolve.\n       });\n */\nexports.sleep = utils.sleep;\n\n\n/**\n * @desc: 获取时间的string.\n * @param time: ms.\n * @param fmt: 格式化, 默认为 'HH:mm:ss'\n *             年(y)、月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q)\n *              'yyyy-MM-dd hh:mm:ss.S' ==> 2006-07-02 08:09:04.423\n *              'yyyy-MM-dd E HH:mm:ss' ==> 2009-03-10 星期二 20:09:04\n *              'yyyy-M-d h:m:s.S'      ==> 2006-7-2 8:9:4.18\n * @param weekFmt: 星期的文字格式, 默认为 {'0':'星期天', '1': '星期一', ..., '6':'星期六'}\n * @return: string.\n */\nexports.getTimeString = utils.getTimeString;\n\n/**\n * @desc: 获取指定时间距离现在的时间描述.\n *        例如, 昨天, 1小时前等.\n * @param time: ms. 小于当前时间, 大于当前时间将显示为 '刚刚';\n * @param strFmt: 需要显示的文字. \n *                默认为 {\n *                        now:    '刚刚',           // 3秒钟以内将显示此信息.\n *                        second: '秒前',\n *                        minute: '分钟前',\n *                        hour:   '小时前',\n *                        day_yesterday: '昨天',\n *                        day:    '天前',\n *                        month:  '个月前',          // 6个月内将显示此信息.\n *                        time:   'yyyy-M-d h:m:s'  // 超过6个月将使用此格式格式化时间\n *                       }\n * @return: string.\n */\nexports.getTimeStringFromNow = utils.getTimeStringFromNow;\n\n/**\n * @desc: getDate('2012-05-09')\n * @return: Date.\n */\nexports.getDate = utils.getDate;\n\n\n/**\n * @desc: getDate2('20120509')\n * @return: Date.\n */\nexports.getDate2 = utils.getDate2;\n\n\n/**\n * @desc: 合并多个map.\n * @return: {}\n */\nexports.mergeMap = utils.mergeMap;\n\n\n/**\n * @desc: 判断参数是否是null,undefined,NaN\n * @return: boolean\n */\nexports.isNull = utils.isNull;\n\n/**\n* @desc: 创建promise，但函数中的this可以为指定值.\n*         例如: yield denodeify(fs.exists)(path);\n* @param self: 指定的对象.s\n* @return: promise.\n*/\nexports.denodeify = utils.denodeify;\n\n/**\n * @desc: \b判断是否是ie.\n */\nexports.browserIsIE =\n  function () {\n    return false;\n  }\n\n/**\n * @desc: 判断ie版本号.\n * @return number. 非ie返回Number.MAX_SAFE_INTEGER.\n *        如果是 edge 返回 'edge'\n */\nexports.browserIEVer =\n  function () {\n    return Number.MAX_SAFE_INTEGER;\n  }\n\n\n/**\n * @desc: the browser is support html5.\n */\nexports.browserIsSupportHtml5 =\n  function () {\n    if (typeof (Worker) !== \"undefined\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n\n/**\n * @desc: the browser is mobile.\n * @param userAgent: the browser user agent string.\n */\nexports.browserIsMobile = function(userAgent) {\n  return true;\n}\n\n/**\n * @desc: the browser is ios.\n */\nexports.browserIsIOS = function() {\n  let systemInfo = wx.getSystemInfoSync();\n  if (systemInfo && systemInfo.platform == 'ios') {\n    return true;\n  }\n  return false;\n}\n\n\n/**\n * @desc: the browser is phone.\n * @param userAgent: the browser user agent string.\n */\nexports.browserIsPhone = function(userAgent) {\n\n  let systemInfo = wx.getSystemInfoSync();\n  if (systemInfo && systemInfo.windowWidth <= 767) {\n    return true;\n  }\n  return false;\n}\n\n\n/**\n * @desc: the browser is weixin.\n */\nexports.browserIsWeixin = function(userAgent) {\n  return true;\n}\n\n/**\n * @desc: the platform is Windows.\n */\nexports.platformIsWindows = function(userAgent) {\n  return false;\n}\n\n\n/**\n * @desc: the platform is Mac.\n */\nexports.platformIsMac = function(userAgent) {\n  return false;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./wxmini/libs/utils.js\n// module id = 13\n// module chunks = 0","'use strict';\n\n/**\n * Copyright (c) 2017 Copyright brainpoint All Rights Reserved.\n * Author: lipengxiang\n * Desc:\n */\n\nvar utilsString = require('./string');\n\nvar crc32_table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];\nexports.crc32_table = crc32_table;\n\n/**\n* @desc: base64编码.\n* @param arrByte: 字节数组.\n* @return: string.\n*/\nexports.base64_encode = function (arrByte) {\n\n  if (!arrByte) {\n    return '';\n  }\n\n  if (typeof arrByte === 'string') {\n    arrByte = utilsString.utf8ToBytes(arrByte);\n  }\n\n  var base64EncodeChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var out, i, len;\n  var c1, c2, c3;\n  len = arrByte.length;\n  i = 0;\n  out = \"\";\n  while (i < len) {\n    c1 = arrByte[i++] & 0xff;\n    if (i == len) {\n      out += base64EncodeChars.charAt(c1 >> 2);\n      out += base64EncodeChars.charAt((c1 & 0x3) << 4);\n      out += \"==\";\n      break;\n    }\n    c2 = arrByte[i++];\n    if (i == len) {\n      out += base64EncodeChars.charAt(c1 >> 2);\n      out += base64EncodeChars.charAt((c1 & 0x3) << 4 | (c2 & 0xF0) >> 4);\n      out += base64EncodeChars.charAt((c2 & 0xF) << 2);\n      out += \"=\";\n      break;\n    }\n    c3 = arrByte[i++];\n    out += base64EncodeChars.charAt(c1 >> 2);\n    out += base64EncodeChars.charAt((c1 & 0x3) << 4 | (c2 & 0xF0) >> 4);\n    out += base64EncodeChars.charAt((c2 & 0xF) << 2 | (c3 & 0xC0) >> 6);\n    out += base64EncodeChars.charAt(c3 & 0x3F);\n  }\n  return out;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./common/crypt.js\n// module id = 14\n// module chunks = 0","'use strict';\n\n/**\n * Copyright (c) 2017 Copyright brainpoint All Rights Reserved.\n * Author: lipengxiang\n * Desc:\n */\n\nvar _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n};\n\nvar PromiseLib = Promise;\nvar utilsDate = require('./date');\n\n/**\n * @desc: 模拟sleep.\n * @return: Promise.\n *     在ms时间后执行.\n * @e.g.\n *     febs.utils.sleep(1000).then(()=>{\n          //1000ms之后resolve.\n       });\n */\nexports.sleep = function (ms) {\n  return new PromiseLib(function (resolve, reject) {\n    try {\n      setTimeout(function () {\n        resolve();\n      }, ms);\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\n/**\n * @desc: 合并多个map (浅拷贝).\n * @return: {}\n */\nexports.mergeMap = function () {\n  var map0 = {};\n  var map2;\n  for (var i = 0; i < arguments.length; i++) {\n    map2 = arguments[i];\n    if (map2) {\n      for (var k in map2) {\n        map0[k] = map2[k];\n      }\n    }\n  }\n\n  return map0;\n};\n/**\n* @desc: 判断参数是否是null,undefined,NaN\n* @return: boolean\n*/\nexports.isNull = function (e) {\n  return e === null || e === undefined || Number.isNaN(e);\n};\n\n/**\n * date.\n */\nexports.getTimeString = utilsDate.getTimeString;\nexports.getTimeStringFromNow = utilsDate.getTimeStringFromNow;\nexports.getDate = utilsDate.getDate;\nexports.getDate2 = utilsDate.getDate2;\n\n/**\n* @desc: 创建promise，但函数中的this可以为指定值.\n*         例如: yield denodeify(fs.exists)(path);\n* @param self: 指定的对象.s\n* @return: promise.\n*/\nexports.denodeify = function (fn, self, argumentCount) {\n  argumentCount = argumentCount || Infinity;\n  return function () {\n    var args = Array.prototype.slice.call(arguments, 0, argumentCount > 0 ? argumentCount : 0);\n    return new PromiseLib(function (resolve, reject) {\n      args.push(function (err, res) {\n        if (err) reject(err);else resolve(res);\n      });\n      var res = fn.apply(self, args);\n      if (res && ((typeof res === 'undefined' ? 'undefined' : _typeof(res)) === 'object' || typeof res === 'function') && typeof res.then === 'function') {\n        resolve(res);\n      }\n    });\n  };\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./common/utils.js\n// module id = 15\n// module chunks = 0","\n\nif (!global.__line) {\n  global.__line = undefined;\n  global.__column = undefined;\n}\n\n// require('es5-shim');\n// require('es5-shim/es5-sham');\n// require('console-polyfill');\nrequire('../common/promise-finally-polyfill');\n// require('babel-polyfill');\n// require('../third-party/bluebird.min.js');\n// require('../third-party/bignumber.min.js');\n\nvar febsutils  = require('./libs/utils');\nvar febscrypt  = require('../libs/crypt');\nvar cryptMd5  = require('../libs/crypt.md5');\nvar cryptSha1  = require('../libs/crypt.sha1');\nvar utilsBig  = require('../common/utils.bigint');\nvar fetch  = require('./libs/fetch');\nvar BigNumber = require('../third-party/bignumber.js');\nvar date  = require('../libs/date');\nvar string = require('../libs/string');\nvar exception  = require('../common/exception');\n\nconst __debug = false;\nconst crypt = febsutils.mergeMap(febscrypt, cryptMd5, cryptSha1);\nconst utils = febsutils.mergeMap(febsutils, utilsBig);\nconst net = {\n    fetch: fetch.fetch,\n  };\n\nexport {\n  __debug,\n  crypt,\n  utils,\n  net,\n  BigNumber,\n  date,\n  string,\n  exception\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./wxmini/index.js\n// module id = 16\n// module chunks = 0"],"sourceRoot":""}